// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cloud-storage/biz/dal/entity"
)

func newUserRepository(db *gorm.DB, opts ...gen.DOOption) userRepository {
	_userRepository := userRepository{}

	_userRepository.userRepositoryDo.UseDB(db, opts...)
	_userRepository.userRepositoryDo.UseModel(&entity.UserRepository{})

	tableName := _userRepository.userRepositoryDo.TableName()
	_userRepository.ALL = field.NewAsterisk(tableName)
	_userRepository.ID = field.NewUint32(tableName, "id")
	_userRepository.Identity = field.NewString(tableName, "identity")
	_userRepository.UserIdentity = field.NewString(tableName, "user_identity")
	_userRepository.ParentID = field.NewInt32(tableName, "parent_id")
	_userRepository.RepositoryIdentity = field.NewString(tableName, "repository_identity")
	_userRepository.Ext = field.NewString(tableName, "ext")
	_userRepository.Name = field.NewString(tableName, "name")
	_userRepository.CreatedAt = field.NewTime(tableName, "created_at")
	_userRepository.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userRepository.DeletedAt = field.NewField(tableName, "deleted_at")

	_userRepository.fillFieldMap()

	return _userRepository
}

type userRepository struct {
	userRepositoryDo

	ALL                field.Asterisk
	ID                 field.Uint32
	Identity           field.String
	UserIdentity       field.String
	ParentID           field.Int32
	RepositoryIdentity field.String
	Ext                field.String // 文件或文件夹类型
	Name               field.String
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field

	fieldMap map[string]field.Expr
}

func (u userRepository) Table(newTableName string) *userRepository {
	u.userRepositoryDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRepository) As(alias string) *userRepository {
	u.userRepositoryDo.DO = *(u.userRepositoryDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRepository) updateTableName(table string) *userRepository {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint32(table, "id")
	u.Identity = field.NewString(table, "identity")
	u.UserIdentity = field.NewString(table, "user_identity")
	u.ParentID = field.NewInt32(table, "parent_id")
	u.RepositoryIdentity = field.NewString(table, "repository_identity")
	u.Ext = field.NewString(table, "ext")
	u.Name = field.NewString(table, "name")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userRepository) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRepository) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["identity"] = u.Identity
	u.fieldMap["user_identity"] = u.UserIdentity
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["repository_identity"] = u.RepositoryIdentity
	u.fieldMap["ext"] = u.Ext
	u.fieldMap["name"] = u.Name
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userRepository) clone(db *gorm.DB) userRepository {
	u.userRepositoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRepository) replaceDB(db *gorm.DB) userRepository {
	u.userRepositoryDo.ReplaceDB(db)
	return u
}

type userRepositoryDo struct{ gen.DO }

type IUserRepositoryDo interface {
	gen.SubQuery
	Debug() IUserRepositoryDo
	WithContext(ctx context.Context) IUserRepositoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRepositoryDo
	WriteDB() IUserRepositoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRepositoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRepositoryDo
	Not(conds ...gen.Condition) IUserRepositoryDo
	Or(conds ...gen.Condition) IUserRepositoryDo
	Select(conds ...field.Expr) IUserRepositoryDo
	Where(conds ...gen.Condition) IUserRepositoryDo
	Order(conds ...field.Expr) IUserRepositoryDo
	Distinct(cols ...field.Expr) IUserRepositoryDo
	Omit(cols ...field.Expr) IUserRepositoryDo
	Join(table schema.Tabler, on ...field.Expr) IUserRepositoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRepositoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRepositoryDo
	Group(cols ...field.Expr) IUserRepositoryDo
	Having(conds ...gen.Condition) IUserRepositoryDo
	Limit(limit int) IUserRepositoryDo
	Offset(offset int) IUserRepositoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRepositoryDo
	Unscoped() IUserRepositoryDo
	Create(values ...*entity.UserRepository) error
	CreateInBatches(values []*entity.UserRepository, batchSize int) error
	Save(values ...*entity.UserRepository) error
	First() (*entity.UserRepository, error)
	Take() (*entity.UserRepository, error)
	Last() (*entity.UserRepository, error)
	Find() ([]*entity.UserRepository, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserRepository, err error)
	FindInBatches(result *[]*entity.UserRepository, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.UserRepository) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRepositoryDo
	Assign(attrs ...field.AssignExpr) IUserRepositoryDo
	Joins(fields ...field.RelationField) IUserRepositoryDo
	Preload(fields ...field.RelationField) IUserRepositoryDo
	FirstOrInit() (*entity.UserRepository, error)
	FirstOrCreate() (*entity.UserRepository, error)
	FindByPage(offset int, limit int) (result []*entity.UserRepository, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRepositoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRepositoryDo) Debug() IUserRepositoryDo {
	return u.withDO(u.DO.Debug())
}

func (u userRepositoryDo) WithContext(ctx context.Context) IUserRepositoryDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRepositoryDo) ReadDB() IUserRepositoryDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRepositoryDo) WriteDB() IUserRepositoryDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRepositoryDo) Session(config *gorm.Session) IUserRepositoryDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRepositoryDo) Clauses(conds ...clause.Expression) IUserRepositoryDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRepositoryDo) Returning(value interface{}, columns ...string) IUserRepositoryDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRepositoryDo) Not(conds ...gen.Condition) IUserRepositoryDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRepositoryDo) Or(conds ...gen.Condition) IUserRepositoryDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRepositoryDo) Select(conds ...field.Expr) IUserRepositoryDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRepositoryDo) Where(conds ...gen.Condition) IUserRepositoryDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRepositoryDo) Order(conds ...field.Expr) IUserRepositoryDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRepositoryDo) Distinct(cols ...field.Expr) IUserRepositoryDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRepositoryDo) Omit(cols ...field.Expr) IUserRepositoryDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRepositoryDo) Join(table schema.Tabler, on ...field.Expr) IUserRepositoryDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRepositoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRepositoryDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRepositoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRepositoryDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRepositoryDo) Group(cols ...field.Expr) IUserRepositoryDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRepositoryDo) Having(conds ...gen.Condition) IUserRepositoryDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRepositoryDo) Limit(limit int) IUserRepositoryDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRepositoryDo) Offset(offset int) IUserRepositoryDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRepositoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRepositoryDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRepositoryDo) Unscoped() IUserRepositoryDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRepositoryDo) Create(values ...*entity.UserRepository) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRepositoryDo) CreateInBatches(values []*entity.UserRepository, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRepositoryDo) Save(values ...*entity.UserRepository) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRepositoryDo) First() (*entity.UserRepository, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRepository), nil
	}
}

func (u userRepositoryDo) Take() (*entity.UserRepository, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRepository), nil
	}
}

func (u userRepositoryDo) Last() (*entity.UserRepository, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRepository), nil
	}
}

func (u userRepositoryDo) Find() ([]*entity.UserRepository, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserRepository), err
}

func (u userRepositoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserRepository, err error) {
	buf := make([]*entity.UserRepository, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRepositoryDo) FindInBatches(result *[]*entity.UserRepository, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRepositoryDo) Attrs(attrs ...field.AssignExpr) IUserRepositoryDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRepositoryDo) Assign(attrs ...field.AssignExpr) IUserRepositoryDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRepositoryDo) Joins(fields ...field.RelationField) IUserRepositoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRepositoryDo) Preload(fields ...field.RelationField) IUserRepositoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRepositoryDo) FirstOrInit() (*entity.UserRepository, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRepository), nil
	}
}

func (u userRepositoryDo) FirstOrCreate() (*entity.UserRepository, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserRepository), nil
	}
}

func (u userRepositoryDo) FindByPage(offset int, limit int) (result []*entity.UserRepository, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRepositoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRepositoryDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRepositoryDo) Delete(models ...*entity.UserRepository) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRepositoryDo) withDO(do gen.Dao) *userRepositoryDo {
	u.DO = *do.(*gen.DO)
	return u
}
