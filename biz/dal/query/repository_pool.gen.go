// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cloud-storage/biz/dal/entity"
)

func newRepositoryPool(db *gorm.DB, opts ...gen.DOOption) repositoryPool {
	_repositoryPool := repositoryPool{}

	_repositoryPool.repositoryPoolDo.UseDB(db, opts...)
	_repositoryPool.repositoryPoolDo.UseModel(&entity.RepositoryPool{})

	tableName := _repositoryPool.repositoryPoolDo.TableName()
	_repositoryPool.ALL = field.NewAsterisk(tableName)
	_repositoryPool.ID = field.NewUint32(tableName, "id")
	_repositoryPool.Identity = field.NewString(tableName, "identity")
	_repositoryPool.Hash = field.NewString(tableName, "hash")
	_repositoryPool.Name = field.NewString(tableName, "name")
	_repositoryPool.Ext = field.NewString(tableName, "ext")
	_repositoryPool.Size = field.NewInt32(tableName, "size")
	_repositoryPool.Path = field.NewString(tableName, "path")
	_repositoryPool.CreatedAt = field.NewTime(tableName, "created_at")
	_repositoryPool.UpdatedAt = field.NewTime(tableName, "updated_at")
	_repositoryPool.DeletedAt = field.NewField(tableName, "deleted_at")

	_repositoryPool.fillFieldMap()

	return _repositoryPool
}

type repositoryPool struct {
	repositoryPoolDo

	ALL       field.Asterisk
	ID        field.Uint32
	Identity  field.String
	Hash      field.String // 文件的唯一标识
	Name      field.String
	Ext       field.String // 文件扩展名
	Size      field.Int32  // 文件大小
	Path      field.String // 文件路径
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (r repositoryPool) Table(newTableName string) *repositoryPool {
	r.repositoryPoolDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r repositoryPool) As(alias string) *repositoryPool {
	r.repositoryPoolDo.DO = *(r.repositoryPoolDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *repositoryPool) updateTableName(table string) *repositoryPool {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Identity = field.NewString(table, "identity")
	r.Hash = field.NewString(table, "hash")
	r.Name = field.NewString(table, "name")
	r.Ext = field.NewString(table, "ext")
	r.Size = field.NewInt32(table, "size")
	r.Path = field.NewString(table, "path")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *repositoryPool) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *repositoryPool) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 10)
	r.fieldMap["id"] = r.ID
	r.fieldMap["identity"] = r.Identity
	r.fieldMap["hash"] = r.Hash
	r.fieldMap["name"] = r.Name
	r.fieldMap["ext"] = r.Ext
	r.fieldMap["size"] = r.Size
	r.fieldMap["path"] = r.Path
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
}

func (r repositoryPool) clone(db *gorm.DB) repositoryPool {
	r.repositoryPoolDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r repositoryPool) replaceDB(db *gorm.DB) repositoryPool {
	r.repositoryPoolDo.ReplaceDB(db)
	return r
}

type repositoryPoolDo struct{ gen.DO }

type IRepositoryPoolDo interface {
	gen.SubQuery
	Debug() IRepositoryPoolDo
	WithContext(ctx context.Context) IRepositoryPoolDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRepositoryPoolDo
	WriteDB() IRepositoryPoolDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRepositoryPoolDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRepositoryPoolDo
	Not(conds ...gen.Condition) IRepositoryPoolDo
	Or(conds ...gen.Condition) IRepositoryPoolDo
	Select(conds ...field.Expr) IRepositoryPoolDo
	Where(conds ...gen.Condition) IRepositoryPoolDo
	Order(conds ...field.Expr) IRepositoryPoolDo
	Distinct(cols ...field.Expr) IRepositoryPoolDo
	Omit(cols ...field.Expr) IRepositoryPoolDo
	Join(table schema.Tabler, on ...field.Expr) IRepositoryPoolDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRepositoryPoolDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRepositoryPoolDo
	Group(cols ...field.Expr) IRepositoryPoolDo
	Having(conds ...gen.Condition) IRepositoryPoolDo
	Limit(limit int) IRepositoryPoolDo
	Offset(offset int) IRepositoryPoolDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRepositoryPoolDo
	Unscoped() IRepositoryPoolDo
	Create(values ...*entity.RepositoryPool) error
	CreateInBatches(values []*entity.RepositoryPool, batchSize int) error
	Save(values ...*entity.RepositoryPool) error
	First() (*entity.RepositoryPool, error)
	Take() (*entity.RepositoryPool, error)
	Last() (*entity.RepositoryPool, error)
	Find() ([]*entity.RepositoryPool, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RepositoryPool, err error)
	FindInBatches(result *[]*entity.RepositoryPool, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.RepositoryPool) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRepositoryPoolDo
	Assign(attrs ...field.AssignExpr) IRepositoryPoolDo
	Joins(fields ...field.RelationField) IRepositoryPoolDo
	Preload(fields ...field.RelationField) IRepositoryPoolDo
	FirstOrInit() (*entity.RepositoryPool, error)
	FirstOrCreate() (*entity.RepositoryPool, error)
	FindByPage(offset int, limit int) (result []*entity.RepositoryPool, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRepositoryPoolDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r repositoryPoolDo) Debug() IRepositoryPoolDo {
	return r.withDO(r.DO.Debug())
}

func (r repositoryPoolDo) WithContext(ctx context.Context) IRepositoryPoolDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r repositoryPoolDo) ReadDB() IRepositoryPoolDo {
	return r.Clauses(dbresolver.Read)
}

func (r repositoryPoolDo) WriteDB() IRepositoryPoolDo {
	return r.Clauses(dbresolver.Write)
}

func (r repositoryPoolDo) Session(config *gorm.Session) IRepositoryPoolDo {
	return r.withDO(r.DO.Session(config))
}

func (r repositoryPoolDo) Clauses(conds ...clause.Expression) IRepositoryPoolDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r repositoryPoolDo) Returning(value interface{}, columns ...string) IRepositoryPoolDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r repositoryPoolDo) Not(conds ...gen.Condition) IRepositoryPoolDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r repositoryPoolDo) Or(conds ...gen.Condition) IRepositoryPoolDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r repositoryPoolDo) Select(conds ...field.Expr) IRepositoryPoolDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r repositoryPoolDo) Where(conds ...gen.Condition) IRepositoryPoolDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r repositoryPoolDo) Order(conds ...field.Expr) IRepositoryPoolDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r repositoryPoolDo) Distinct(cols ...field.Expr) IRepositoryPoolDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r repositoryPoolDo) Omit(cols ...field.Expr) IRepositoryPoolDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r repositoryPoolDo) Join(table schema.Tabler, on ...field.Expr) IRepositoryPoolDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r repositoryPoolDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRepositoryPoolDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r repositoryPoolDo) RightJoin(table schema.Tabler, on ...field.Expr) IRepositoryPoolDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r repositoryPoolDo) Group(cols ...field.Expr) IRepositoryPoolDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r repositoryPoolDo) Having(conds ...gen.Condition) IRepositoryPoolDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r repositoryPoolDo) Limit(limit int) IRepositoryPoolDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r repositoryPoolDo) Offset(offset int) IRepositoryPoolDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r repositoryPoolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRepositoryPoolDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r repositoryPoolDo) Unscoped() IRepositoryPoolDo {
	return r.withDO(r.DO.Unscoped())
}

func (r repositoryPoolDo) Create(values ...*entity.RepositoryPool) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r repositoryPoolDo) CreateInBatches(values []*entity.RepositoryPool, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r repositoryPoolDo) Save(values ...*entity.RepositoryPool) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r repositoryPoolDo) First() (*entity.RepositoryPool, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RepositoryPool), nil
	}
}

func (r repositoryPoolDo) Take() (*entity.RepositoryPool, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RepositoryPool), nil
	}
}

func (r repositoryPoolDo) Last() (*entity.RepositoryPool, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RepositoryPool), nil
	}
}

func (r repositoryPoolDo) Find() ([]*entity.RepositoryPool, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RepositoryPool), err
}

func (r repositoryPoolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RepositoryPool, err error) {
	buf := make([]*entity.RepositoryPool, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r repositoryPoolDo) FindInBatches(result *[]*entity.RepositoryPool, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r repositoryPoolDo) Attrs(attrs ...field.AssignExpr) IRepositoryPoolDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r repositoryPoolDo) Assign(attrs ...field.AssignExpr) IRepositoryPoolDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r repositoryPoolDo) Joins(fields ...field.RelationField) IRepositoryPoolDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r repositoryPoolDo) Preload(fields ...field.RelationField) IRepositoryPoolDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r repositoryPoolDo) FirstOrInit() (*entity.RepositoryPool, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RepositoryPool), nil
	}
}

func (r repositoryPoolDo) FirstOrCreate() (*entity.RepositoryPool, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RepositoryPool), nil
	}
}

func (r repositoryPoolDo) FindByPage(offset int, limit int) (result []*entity.RepositoryPool, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r repositoryPoolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r repositoryPoolDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r repositoryPoolDo) Delete(models ...*entity.RepositoryPool) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *repositoryPoolDo) withDO(do gen.Dao) *repositoryPoolDo {
	r.DO = *do.(*gen.DO)
	return r
}
