// Code generated by hertz generator.

package chunk

import (
	"cloud-storage/biz/dal/query"
	"context"

	chunk "cloud-storage/biz/model/chunk"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var q = query.Q

// FileUploadPrepare .
// @router /file/upload/prepare [POST]
func FileUploadPrepare(ctx context.Context, c *app.RequestContext) {
	var err error
	var req chunk.FileUploadPrepareRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rp, err := q.RepositoryPool.Where(q.RepositoryPool.Hash.Eq(req.Md5)).First()
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	var reply chunk.FileUploadPrepareReply
	if rp != nil {
		reply.Identity = rp.Identity
	}

	c.JSON(consts.StatusOK, &reply)
}

// FileUploadChunk .
// @router /file/upload/chunk [POST]
func FileUploadChunk(ctx context.Context, c *app.RequestContext) {
	var err error
	var req chunk.FileUploadChunkRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	_, err = c.FormFile("file")
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(chunk.FileUploadChunkReply)

	c.JSON(consts.StatusOK, resp)
}

// FileUploadChunkComplete .
// @router /file/upload/chunk/complete [POST]
func FileUploadChunkComplete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req chunk.FileUploadChunkCompleteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(chunk.FileUploadChunkCompleteReply)

	c.JSON(consts.StatusOK, resp)
}
