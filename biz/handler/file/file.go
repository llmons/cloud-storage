// Code generated by hertz generator.

package file

import (
	"context"
	"os"
	"path/filepath"

	file "cloud-storage/biz/model/file"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FileUpload .
// @router /file/upload [POST]
func FileUpload(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.FileUploadRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	fileHeader, err := c.FormFile("file")
	if err != nil {
		c.String(consts.StatusBadRequest, "file upload error: %v", err)
		return
	}

	filename := filepath.Base(fileHeader.Filename)
	joinedPath := filepath.Join(os.TempDir(), "cloud_storage", filename)
	if err := os.MkdirAll(filepath.Dir(joinedPath), os.ModePerm); err != nil {
		c.String(consts.StatusInternalServerError, "failed to create directory: %v", err)
		return
	}
	if err := c.SaveUploadedFile(fileHeader, joinedPath); err != nil {
		c.String(consts.StatusInternalServerError, "failed to save file: %v", err)
		return
	}

	resp := new(file.FileUploadReply)

	c.JSON(consts.StatusOK, resp)
}

// UserRepositorySave .
// @router /user/repository/save [POST]
func UserRepositorySave(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.UserRepositorySaveRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(file.UserRepositorySaveReply)

	c.JSON(consts.StatusOK, resp)
}

// UserFileList .
// @router /user/file/list [POST]
func UserFileList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.UserFileListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(file.UserFileListReply)

	c.JSON(consts.StatusOK, resp)
}

// UserFolderList .
// @router /user/folder/list [POST]
func UserFolderList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.UserFolderListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(file.UserFolderListReply)

	c.JSON(consts.StatusOK, resp)
}

// UserFileNameUpdate .
// @router /user/file/name/update [POST]
func UserFileNameUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.UserFileNameUpdateRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(file.UserFileNameUpdateReply)

	c.JSON(consts.StatusOK, resp)
}

// UserFolderCreate .
// @router /user/folder/create [POST]
func UserFolderCreate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.UserFolderCreateRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(file.UserFolderCreateReply)

	c.JSON(consts.StatusOK, resp)
}

// UserFileDelete .
// @router /user/file/delete [DELETE]
func UserFileDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.UserFileDeleteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(file.UserFileDeleteReply)

	c.JSON(consts.StatusOK, resp)
}

// UserFileMove .
// @router /user/file/move [PUT]
func UserFileMove(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.UserFileMoveRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(file.UserFileMoveReply)

	c.JSON(consts.StatusOK, resp)
}
