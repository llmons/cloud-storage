// Code generated by hertz generator.

package user

import (
	"cloud-storage/biz/dal/query"
	user "cloud-storage/biz/model/user"
	"context"
	"crypto/md5"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var q = query.Q

// UserLogin .
// @router /user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	pwdMd5 := fmt.Sprintf("%x", md5.Sum([]byte(req.Password)))
	userBasic, err := q.UserBasic.Where(q.UserBasic.Name.Eq(req.Name), q.UserBasic.Password.Eq(pwdMd5)).First()
	if err != nil {
		c.String(consts.StatusBadRequest, "username or password error")
		return
	}

	c.JSON(consts.StatusOK, &user.LoginReply{
		Token:        *userBasic.Identity,
		RefreshToken: "",
	})
}

// UserDetail .
// @router /user/detail [POST]
func UserDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserDetailReply)

	c.JSON(consts.StatusOK, resp)
}

// MailCodeSendRegister .
// @router /mail/code/send/register [POST]
func MailCodeSendRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.MailCodeSendRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.MailCodeSendReply)

	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserRegisterReply)

	c.JSON(consts.StatusOK, resp)
}

// RefreshAuthorization .
// @router /refresh/authorization [POST]
func RefreshAuthorization(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RefreshAuthorizationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.RefreshAuthorizationReply)

	c.JSON(consts.StatusOK, resp)
}
