// Code generated by hertz generator.

package user

import (
	"context"

	user "cloud-storage/biz/model/user"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserLogin .
// @router /user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.LoginReply)

	c.JSON(consts.StatusOK, resp)
}

// UserDetail .
// @router /user/detail [POST]
func UserDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserDetailReply)

	c.JSON(consts.StatusOK, resp)
}

// MailCodeSendRegister .
// @router /mail/code/send/register [POST]
func MailCodeSendRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.MailCodeSendRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.MailCodeSendReply)

	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserRegisterReply)

	c.JSON(consts.StatusOK, resp)
}

// RefreshAuthorization .
// @router /refresh/authorization [POST]
func RefreshAuthorization(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RefreshAuthorizationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.RefreshAuthorizationReply)

	c.JSON(consts.StatusOK, resp)
}
