// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"context"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	cloud_storageV1 "cloud-storage/api/cloud_storage/v1"
)

var _ cloud_storageV1.ChunkLogicer = (*chunkHandler)(nil)

type chunkHandler struct {
	// example:
	// 	chunkDao dao.ChunkDao
}

// NewChunkHandler create a handler
func NewChunkHandler() cloud_storageV1.ChunkLogicer {
	return &chunkHandler{
		// example:
		// 	chunkDao: dao.NewChunkDao(
		// 		database.GetDB(),
		// 		cache.NewChunkCache(database.GetCacheType()),
		// 	),
	}
}

// FileUploadPrepare 文件上传前基本信息处理
func (h *chunkHandler) FileUploadPrepare(ctx context.Context, req *cloud_storageV1.FileUploadPrepareRequest) (*cloud_storageV1.FileUploadPrepareReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.chunkDao.FileUploadPrepare(ctx, &model.Chunk{
	//     	Md5: req.Md5,
	//     	Name: req.Name,
	//     	Ext: req.Ext,
	//     })
	//	    if err != nil {
	//			logger.Warn("FileUploadPrepare error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.FileUploadPrepareReply{
	//     	Identity: reply.Identity,
	//     	UploadId: reply.UploadId,
	//     	Key: reply.Key,
	//     }, nil
}

// FileUploadChunk 文件分片上传
func (h *chunkHandler) FileUploadChunk(ctx context.Context, req *cloud_storageV1.FileUploadChunkRequest) (*cloud_storageV1.FileUploadChunkReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.chunkDao.FileUploadChunk(ctx, &model.Chunk{
	//     	Key: req.Key,
	//     	UploadId: req.UploadId,
	//     	PartNumber: req.PartNumber,
	//     })
	//	    if err != nil {
	//			logger.Warn("FileUploadChunk error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.FileUploadChunkReply{
	//     	Etag: reply.Etag,
	//     }, nil
}

// FileUploadChunkComplete 文件分片上传完成
func (h *chunkHandler) FileUploadChunkComplete(ctx context.Context, req *cloud_storageV1.FileUploadChunkCompleteRequest) (*cloud_storageV1.FileUploadChunkCompleteReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.chunkDao.FileUploadChunkComplete(ctx, &model.Chunk{
	//     	Md5: req.Md5,
	//     	Name: req.Name,
	//     	Ext: req.Ext,
	//     	Size: req.Size,
	//     	Key: req.Key,
	//     	UploadId: req.UploadId,
	//     	CosObjects: req.CosObjects,
	//     })
	//	    if err != nil {
	//			logger.Warn("FileUploadChunkComplete error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.FileUploadChunkCompleteReply{
	//     	Identity: reply.Identity,
	//     }, nil
}
