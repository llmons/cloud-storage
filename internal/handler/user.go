// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"cloud-storage/internal/cache"
	"cloud-storage/internal/dao"
	"cloud-storage/internal/database"
	"cloud-storage/internal/ecode"
	"cloud-storage/internal/jwt"
	"context"
	"crypto/md5"
	"errors"
	"fmt"
	"github.com/go-dev-frame/sponge/pkg/gin/middleware"
	"github.com/go-dev-frame/sponge/pkg/logger"
	"github.com/go-dev-frame/sponge/pkg/sgorm/query"
	gjwt "github.com/golang-jwt/jwt/v5"
	"gorm.io/gorm"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	cloud_storageV1 "cloud-storage/api/cloud_storage/v1"
)

var _ cloud_storageV1.UserLogicer = (*userHandler)(nil)

type userHandler struct {
	userBasicDao dao.UserBasicDao
}

// NewUserHandler create a handler
func NewUserHandler() cloud_storageV1.UserLogicer {
	return &userHandler{
		userBasicDao: dao.NewUserBasicDao(
			database.GetDB(),
			cache.NewUserBasicCache(database.GetCacheType()),
		),
	}
}

// UserLogin 用户登录
func (h *userHandler) UserLogin(ctx context.Context, req *cloud_storageV1.LoginRequest) (*cloud_storageV1.LoginReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	pwdMd5 := fmt.Sprintf("%x", md5.Sum([]byte(req.Password)))

	user, err := h.userBasicDao.GetByCondition(ctx, &query.Conditions{
		Columns: []query.Column{
			{
				Name:  "name",
				Value: req.Name,
			},
			{
				Name:  "password",
				Value: pwdMd5,
			},
		},
	})
	if err != nil {
		logger.Warn("UserLogin error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserLoginUser.Err()
	}

	claims := jwt.UserClaims{
		ID:       user.ID,
		Identity: user.Identity,
		Name:     user.Name,
	}
	token := gjwt.NewWithClaims(gjwt.SigningMethodHS256, claims)
	signedToken, err := token.SignedString(jwt.Key)
	if err != nil {
		logger.Warn("Failed to sign token", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserLoginUser.Err()
	}

	return &cloud_storageV1.LoginReply{
		Token:        signedToken,
		RefreshToken: "",
	}, nil
}

// UserDetail 用户详情
func (h *userHandler) UserDetail(ctx context.Context, req *cloud_storageV1.UserDetailRequest) (*cloud_storageV1.UserDetailReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	user, err := h.userBasicDao.GetByCondition(ctx, &query.Conditions{
		Columns: []query.Column{
			{
				Name:  "identity",
				Value: req.Identity,
			},
		},
	})
	if err != nil {
		logger.Warn("UserDetail error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserDetailUser.Err()
	}

	return &cloud_storageV1.UserDetailReply{
		Name:  user.Name,
		Email: user.Email,
	}, nil
}

// MailCodeSendRegister 验证码发送
func (h *userHandler) MailCodeSendRegister(ctx context.Context, req *cloud_storageV1.MailCodeSendRequest) (*cloud_storageV1.MailCodeSendReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	user, err := h.userBasicDao.GetByCondition(ctx, &query.Conditions{
		Columns: []query.Column{
			{
				Name:  "email",
				Value: req.Email,
			},
		},
	})
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logger.Warn("MailCodeSendRegister error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserLoginUser.Err()
	}

	if user != nil {
		logger.Warn("MailCodeSendRegister error", logger.Err(ecode.ErrUserExistsUser.Err()), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserExistsUser.Err()
	}

	logger.Debug("MailCodeSendRegister", logger.String("code", "123456"), middleware.CtxRequestIDField(ctx))

	return &cloud_storageV1.MailCodeSendReply{}, nil
}

// UserRegister 用户注册
func (h *userHandler) UserRegister(ctx context.Context, req *cloud_storageV1.UserRegisterRequest) (*cloud_storageV1.UserRegisterReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.userDao.UserRegister(ctx, &model.User{
	//     	Name: req.Name,
	//     	Password: req.Password,
	//     	Email: req.Email,
	//     	Code: req.Code,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserRegister error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserRegisterReply{
	//     }, nil
}

// RefreshAuthorization 刷新Authorization
func (h *userHandler) RefreshAuthorization(ctx context.Context, req *cloud_storageV1.RefreshAuthorizationRequest) (*cloud_storageV1.RefreshAuthorizationReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.userDao.RefreshAuthorization(ctx, &model.User{
	//     })
	//	    if err != nil {
	//			logger.Warn("RefreshAuthorization error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.RefreshAuthorizationReply{
	//     	Token: reply.Token,
	//     	RefreshToken: reply.RefreshToken,
	//     }, nil
}
