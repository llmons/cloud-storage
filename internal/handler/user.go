// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"cloud-storage/internal/cache"
	"cloud-storage/internal/constants"
	"cloud-storage/internal/dao"
	"cloud-storage/internal/database"
	"cloud-storage/internal/ecode"
	"cloud-storage/internal/model"
	"context"
	"crypto/md5"
	"errors"
	"fmt"
	"github.com/duke-git/lancet/v2/random"
	"github.com/go-dev-frame/sponge/pkg/gin/middleware"
	"github.com/go-dev-frame/sponge/pkg/jwt"
	"github.com/go-dev-frame/sponge/pkg/logger"
	"github.com/go-dev-frame/sponge/pkg/sgorm/query"
	"gorm.io/gorm"
	"strconv"
	"time"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	cloud_storageV1 "cloud-storage/api/cloud_storage/v1"
)

var _ cloud_storageV1.UserLogicer = (*userHandler)(nil)

type userHandler struct {
	userBasicDao dao.UserBasicDao
}

// NewUserHandler create a handler
func NewUserHandler() cloud_storageV1.UserLogicer {
	return &userHandler{
		userBasicDao: dao.NewUserBasicDao(
			database.GetDB(),
			cache.NewUserBasicCache(database.GetCacheType()),
		),
	}
}

// UserLogin 用户登录
func (h *userHandler) UserLogin(ctx context.Context, req *cloud_storageV1.LoginRequest) (*cloud_storageV1.LoginReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	pwdMd5 := fmt.Sprintf("%x", md5.Sum([]byte(req.Password)))

	user, err := h.userBasicDao.GetByCondition(ctx, &query.Conditions{
		Columns: []query.Column{
			{
				Name:  "name",
				Value: req.Name,
			},
			{
				Name:  "password",
				Value: pwdMd5,
			},
		},
	})
	if err != nil {
		logger.Warn("UserLogin error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserLoginUser.Err()
	}

	_, tokenStr, err := jwt.GenerateToken(strconv.FormatUint(user.ID, 10),
		jwt.WithGenerateTokenSignKey([]byte(constants.JwtSecretKey)),
		jwt.WithGenerateTokenFields(map[string]interface{}{
			"identity": user.Identity,
			"name":     user.Name,
		}))
	if err != nil {
		logger.Warn("Failed to sign token", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserLoginUser.Err()
	}

	return &cloud_storageV1.LoginReply{
		Token:        tokenStr,
		RefreshToken: "",
	}, nil
}

// UserDetail 用户详情
func (h *userHandler) UserDetail(ctx context.Context, req *cloud_storageV1.UserDetailRequest) (*cloud_storageV1.UserDetailReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	user, err := h.userBasicDao.GetByCondition(ctx, &query.Conditions{
		Columns: []query.Column{
			{
				Name:  "identity",
				Value: req.Identity,
			},
		},
	})
	if err != nil {
		logger.Warn("UserDetail error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserDetailUser.Err()
	}

	return &cloud_storageV1.UserDetailReply{
		Name:  user.Name,
		Email: user.Email,
	}, nil
}

// MailCodeSendRegister 验证码发送
func (h *userHandler) MailCodeSendRegister(ctx context.Context, req *cloud_storageV1.MailCodeSendRequest) (*cloud_storageV1.MailCodeSendReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// Check if the email is already registered
	user, err := h.userBasicDao.GetByCondition(ctx, &query.Conditions{
		Columns: []query.Column{
			{
				Name:  "email",
				Value: req.Email,
			},
		},
	})
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logger.Warn("MailCodeSendRegister error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserLoginUser.Err()
	}
	if user != nil {
		logger.Warn("MailCodeSendRegister error", logger.Err(ecode.ErrUserExistsUser.Err()), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserExistsUser.Err()
	}

	// Generate code
	code := "123456"
	_, err = database.GetRedisCli().Set(ctx, req.Email, code, time.Second*constants.CodeExpire).Result()
	if err != nil {
		logger.Warn("Failed to set code in Redis", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrMailCodeSendRegisterUser.Err()
	}

	logger.Debug("MailCodeSendRegister", logger.String("code", code), middleware.CtxRequestIDField(ctx))

	return &cloud_storageV1.MailCodeSendReply{}, nil
}

// UserRegister 用户注册
func (h *userHandler) UserRegister(ctx context.Context, req *cloud_storageV1.UserRegisterRequest) (*cloud_storageV1.UserRegisterReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// Check if the code is valid
	code, err := database.GetRedisCli().Get(ctx, req.Email).Result()
	if err != nil {
		logger.Warn("Failed to get code from Redis", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrMailCodeSendRegisterUser.Err()
	}
	if code != req.Code {
		logger.Warn("Invalid code", logger.String("code", code), logger.String("reqCode", req.Code), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrMailCodeSendRegisterUser.Err()
	}

	// Check if the user already exists
	user, err := h.userBasicDao.GetByCondition(ctx, &query.Conditions{
		Columns: []query.Column{
			{
				Name:  "name",
				Value: req.Name,
			},
		},
	})
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logger.Warn("UserRegister error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserRegisterUser.Err()
	}
	if user != nil {
		logger.Warn("UserRegister error", logger.Err(ecode.ErrUserExistsUser.Err()), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserExistsUser.Err()
	}

	// Create user
	uuid, err := random.UUIdV4()
	if err != nil {
		logger.Warn("Failed to generate UUID", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	err = h.userBasicDao.Create(ctx, &model.UserBasic{
		Identity: uuid,
		Name:     req.Name,
		Password: req.Password,
		Email:    req.Email,
	})
	if err != nil {
		logger.Warn("UserRegister error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &cloud_storageV1.UserRegisterReply{}, nil
}

// RefreshAuthorization 刷新Authorization
func (h *userHandler) RefreshAuthorization(ctx context.Context, req *cloud_storageV1.RefreshAuthorizationRequest) (*cloud_storageV1.RefreshAuthorizationReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.userDao.RefreshAuthorization(ctx, &model.User{
	//     })
	//	    if err != nil {
	//			logger.Warn("RefreshAuthorization error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.RefreshAuthorizationReply{
	//     	Token: reply.Token,
	//     	RefreshToken: reply.RefreshToken,
	//     }, nil
}
