// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"context"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	cloud_storageV1 "cloud-storage/api/cloud_storage/v1"
)

var _ cloud_storageV1.UserLogicer = (*userHandler)(nil)

type userHandler struct {
	// example:
	// 	userDao dao.UserDao
}

// NewUserHandler create a handler
func NewUserHandler() cloud_storageV1.UserLogicer {
	return &userHandler{
		// example:
		// 	userDao: dao.NewUserDao(
		// 		database.GetDB(),
		// 		cache.NewUserCache(database.GetCacheType()),
		// 	),
	}
}

// UserLogin 用户登录
func (h *userHandler) UserLogin(ctx context.Context, req *cloud_storageV1.LoginRequest) (*cloud_storageV1.LoginReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.userDao.UserLogin(ctx, &model.User{
	//     	Name: req.Name,
	//     	Password: req.Password,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserLogin error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.LoginReply{
	//     	Token: reply.Token,
	//     	RefreshToken: reply.RefreshToken,
	//     }, nil
}

// UserDetail 用户详情
func (h *userHandler) UserDetail(ctx context.Context, req *cloud_storageV1.UserDetailRequest) (*cloud_storageV1.UserDetailReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.userDao.UserDetail(ctx, &model.User{
	//     	Identity: req.Identity,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserDetail error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserDetailReply{
	//     	Name: reply.Name,
	//     	Email: reply.Email,
	//     }, nil
}

// MailCodeSendRegister 验证码发送
func (h *userHandler) MailCodeSendRegister(ctx context.Context, req *cloud_storageV1.MailCodeSendRequest) (*cloud_storageV1.MailCodeSendReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.userDao.MailCodeSendRegister(ctx, &model.User{
	//     	Email: req.Email,
	//     })
	//	    if err != nil {
	//			logger.Warn("MailCodeSendRegister error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.MailCodeSendReply{
	//     }, nil
}

// UserRegister 用户注册
func (h *userHandler) UserRegister(ctx context.Context, req *cloud_storageV1.UserRegisterRequest) (*cloud_storageV1.UserRegisterReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.userDao.UserRegister(ctx, &model.User{
	//     	Name: req.Name,
	//     	Password: req.Password,
	//     	Email: req.Email,
	//     	Code: req.Code,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserRegister error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserRegisterReply{
	//     }, nil
}

// RefreshAuthorization 刷新Authorization
func (h *userHandler) RefreshAuthorization(ctx context.Context, req *cloud_storageV1.RefreshAuthorizationRequest) (*cloud_storageV1.RefreshAuthorizationReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.userDao.RefreshAuthorization(ctx, &model.User{
	//     })
	//	    if err != nil {
	//			logger.Warn("RefreshAuthorization error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.RefreshAuthorizationReply{
	//     	Token: reply.Token,
	//     	RefreshToken: reply.RefreshToken,
	//     }, nil
}
