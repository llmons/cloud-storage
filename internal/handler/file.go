// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"cloud-storage/internal/cache"
	"cloud-storage/internal/dao"
	"cloud-storage/internal/database"
	"cloud-storage/internal/ecode"
	"cloud-storage/internal/model"
	"context"
	"crypto/md5"
	"errors"
	"fmt"
	"github.com/duke-git/lancet/v2/random"
	"github.com/go-dev-frame/sponge/pkg/gin/middleware"
	"github.com/go-dev-frame/sponge/pkg/logger"
	"github.com/go-dev-frame/sponge/pkg/sgorm/query"
	"gorm.io/gorm"
	"mime/multipart"
	"os"
	"path/filepath"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	cloud_storageV1 "cloud-storage/api/cloud_storage/v1"
)

var _ cloud_storageV1.FileLogicer = (*fileHandler)(nil)

type fileHandler struct {
	rpDao dao.RepositoryPoolDao
	urDao dao.UserRepositoryDao
}

// NewFileHandler create a handler
func NewFileHandler() cloud_storageV1.FileLogicer {
	return &fileHandler{
		rpDao: dao.NewRepositoryPoolDao(
			database.GetDB(),
			cache.NewRepositoryPoolCache(database.GetCacheType()),
		),
		urDao: dao.NewUserRepositoryDao(
			database.GetDB(),
			cache.NewUserRepositoryCache(database.GetCacheType()),
		),
	}
}

// FileUpload 文件上传
func (h *fileHandler) FileUpload(ctx context.Context, req *cloud_storageV1.FileUploadRequest) (*cloud_storageV1.FileUploadReply, error) {
	c, ctx := middleware.AdaptCtx(ctx)
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	file, fileHeader, err := c.Request.FormFile("file")
	if err != nil {
		logger.Warn("FormFile error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrFileUploadFile.Err()
	}
	defer func(file multipart.File) {
		err := file.Close()
		if err != nil {
			logger.Warn("File close error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		}
	}(file)

	// Check if the file is existing
	bytes := make([]byte, fileHeader.Size)
	if _, err := file.Read(bytes); err != nil {
		logger.Warn("File read error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrFileUploadFile.Err()
	}
	hash := fmt.Sprintf("%x", md5.Sum(bytes))
	rp, err := h.rpDao.GetByCondition(ctx, &query.Conditions{
		Columns: []query.Column{
			{
				Name:  "hash",
				Value: hash,
			},
		},
	})
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logger.Warn("FileUpload error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrFileUploadFile.Err()
	}
	if rp != nil {
		logger.Info("File already exists", logger.String("hash", hash), middleware.CtxRequestIDField(ctx))
		return &cloud_storageV1.FileUploadReply{
			Identity: rp.Identity,
			Ext:      rp.Ext,
			Name:     rp.Name,
		}, nil
	}

	// Save file
	filename := filepath.Base(fileHeader.Filename)
	joinedPath := filepath.Join(os.TempDir(), "cloud_storage", filename)
	if err := os.MkdirAll(filepath.Dir(joinedPath), os.ModePerm); err != nil {
		logger.Warn("MkdirAll error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrFileUploadFile.Err()
	}
	if err := c.SaveUploadedFile(fileHeader, joinedPath); err != nil {
		logger.Warn("SaveUploadedFile error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrFileUploadFile.Err()
	}

	// Create RepositoryPool
	uuid, err := random.UUIdV4()
	if err != nil {
		logger.Warn("UUIdV4 error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrFileUploadFile.Err()
	}
	rp = &model.RepositoryPool{
		Identity: uuid,
		Hash:     hash,
		Name:     filename,
		Ext:      filepath.Ext(fileHeader.Filename),
		Size:     int(fileHeader.Size),
		Path:     joinedPath,
	}
	if err := h.rpDao.Create(ctx, rp); err != nil {
		logger.Warn("Create RepositoryPool error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrFileUploadFile.Err()
	}

	return &cloud_storageV1.FileUploadReply{
		Identity: rp.Identity,
		Ext:      rp.Ext,
		Name:     filename,
	}, nil
}

// UserRepositorySave 用户文件的关联存储
func (h *fileHandler) UserRepositorySave(ctx context.Context, req *cloud_storageV1.UserRepositorySaveRequest) (*cloud_storageV1.UserRepositorySaveReply, error) {
	c, ctx := middleware.AdaptCtx(ctx)
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	uuid, err := random.UUIdV4()
	if err != nil {
		logger.Warn("UUIdV4 error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserRepositorySaveFile.Err()
	}
	claims, ok := middleware.GetClaims(c)
	if !ok {
		logger.Warn("GetClaims not ok", middleware.CtxRequestIDField(ctx))
		return nil, ecode.Unauthorized.Err()
	}
	userIdentity, ok := claims.GetString("identity")
	if !ok {
		logger.Warn("GetString identity not ok", middleware.CtxRequestIDField(ctx))
		return nil, ecode.Unauthorized.Err()
	}
	ur := &model.UserRepository{
		Identity:           uuid,
		UserIdentity:       userIdentity,
		ParentID:           int(req.ParentId),
		RepositoryIdentity: req.RepositoryIdentity,
		Ext:                req.Ext,
		Name:               req.Name,
	}

	if err := h.urDao.Create(ctx, ur); err != nil {
		logger.Warn("UserRepositorySave error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUserRepositorySaveFile.Err()
	}

	return &cloud_storageV1.UserRepositorySaveReply{}, nil
}

// UserFileList 用户文件列表
func (h *fileHandler) UserFileList(ctx context.Context, req *cloud_storageV1.UserFileListRequest) (*cloud_storageV1.UserFileListReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFileList(ctx, &model.File{
	//     	Identity: req.Identity,
	//     	Page: req.Page,
	//     	Size: req.Size,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFileList error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFileListReply{
	//     	List: reply.List,
	//     	Count: reply.Count,
	//     }, nil
}

// UserFolderList 用户文件夹列表
func (h *fileHandler) UserFolderList(ctx context.Context, req *cloud_storageV1.UserFolderListRequest) (*cloud_storageV1.UserFolderListReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFolderList(ctx, &model.File{
	//     	Identity: req.Identity,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFolderList error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFolderListReply{
	//     	List: reply.List,
	//     }, nil
}

// UserFileNameUpdate 用户文件名称修改
func (h *fileHandler) UserFileNameUpdate(ctx context.Context, req *cloud_storageV1.UserFileNameUpdateRequest) (*cloud_storageV1.UserFileNameUpdateReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFileNameUpdate(ctx, &model.File{
	//     	Identity: req.Identity,
	//     	Name: req.Name,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFileNameUpdate error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFileNameUpdateReply{
	//     }, nil
}

// UserFolderCreate 用户-文件夹创建
func (h *fileHandler) UserFolderCreate(ctx context.Context, req *cloud_storageV1.UserFolderCreateRequest) (*cloud_storageV1.UserFolderCreateReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFolderCreate(ctx, &model.File{
	//     	ParentId: req.ParentId,
	//     	Name: req.Name,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFolderCreate error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFolderCreateReply{
	//     	Identity: reply.Identity,
	//     }, nil
}

// UserFileDelete 用户-文件删除
func (h *fileHandler) UserFileDelete(ctx context.Context, req *cloud_storageV1.UserFileDeleteRequest) (*cloud_storageV1.UserFileDeleteReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFileDelete(ctx, &model.File{
	//     	Identity: req.Identity,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFileDelete error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFileDeleteReply{
	//     }, nil
}

// UserFileMove 用户-文件移动
func (h *fileHandler) UserFileMove(ctx context.Context, req *cloud_storageV1.UserFileMoveRequest) (*cloud_storageV1.UserFileMoveReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFileMove(ctx, &model.File{
	//     	Identity: req.Identity,
	//     	ParentIdentity: req.ParentIdentity,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFileMove error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFileMoveReply{
	//     }, nil
}
