// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"context"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	cloud_storageV1 "cloud-storage/api/cloud_storage/v1"
)

var _ cloud_storageV1.FileLogicer = (*fileHandler)(nil)

type fileHandler struct {
	// example:
	// 	fileDao dao.FileDao
}

// NewFileHandler create a handler
func NewFileHandler() cloud_storageV1.FileLogicer {
	return &fileHandler{
		// example:
		// 	fileDao: dao.NewFileDao(
		// 		database.GetDB(),
		// 		cache.NewFileCache(database.GetCacheType()),
		// 	),
	}
}

// FileUpload 文件上传
func (h *fileHandler) FileUpload(ctx context.Context, req *cloud_storageV1.FileUploadRequest) (*cloud_storageV1.FileUploadReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.FileUpload(ctx, &model.File{
	//     	Hash: req.Hash,
	//     	Name: req.Name,
	//     	Ext: req.Ext,
	//     	Size: req.Size,
	//     	Path: req.Path,
	//     })
	//	    if err != nil {
	//			logger.Warn("FileUpload error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.FileUploadReply{
	//     	Identity: reply.Identity,
	//     	Ext: reply.Ext,
	//     	Name: reply.Name,
	//     }, nil
}

// UserRepositorySave 用户文件的关联存储
func (h *fileHandler) UserRepositorySave(ctx context.Context, req *cloud_storageV1.UserRepositorySaveRequest) (*cloud_storageV1.UserRepositorySaveReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserRepositorySave(ctx, &model.File{
	//     	ParentId: req.ParentId,
	//     	RepositoryIdentity: req.RepositoryIdentity,
	//     	Ext: req.Ext,
	//     	Name: req.Name,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserRepositorySave error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserRepositorySaveReply{
	//     }, nil
}

// UserFileList 用户文件列表
func (h *fileHandler) UserFileList(ctx context.Context, req *cloud_storageV1.UserFileListRequest) (*cloud_storageV1.UserFileListReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFileList(ctx, &model.File{
	//     	Identity: req.Identity,
	//     	Page: req.Page,
	//     	Size: req.Size,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFileList error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFileListReply{
	//     	List: reply.List,
	//     	Count: reply.Count,
	//     }, nil
}

// UserFolderList 用户文件夹列表
func (h *fileHandler) UserFolderList(ctx context.Context, req *cloud_storageV1.UserFolderListRequest) (*cloud_storageV1.UserFolderListReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFolderList(ctx, &model.File{
	//     	Identity: req.Identity,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFolderList error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFolderListReply{
	//     	List: reply.List,
	//     }, nil
}

// UserFileNameUpdate 用户文件名称修改
func (h *fileHandler) UserFileNameUpdate(ctx context.Context, req *cloud_storageV1.UserFileNameUpdateRequest) (*cloud_storageV1.UserFileNameUpdateReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFileNameUpdate(ctx, &model.File{
	//     	Identity: req.Identity,
	//     	Name: req.Name,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFileNameUpdate error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFileNameUpdateReply{
	//     }, nil
}

// UserFolderCreate 用户-文件夹创建
func (h *fileHandler) UserFolderCreate(ctx context.Context, req *cloud_storageV1.UserFolderCreateRequest) (*cloud_storageV1.UserFolderCreateReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFolderCreate(ctx, &model.File{
	//     	ParentId: req.ParentId,
	//     	Name: req.Name,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFolderCreate error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFolderCreateReply{
	//     	Identity: reply.Identity,
	//     }, nil
}

// UserFileDelete 用户-文件删除
func (h *fileHandler) UserFileDelete(ctx context.Context, req *cloud_storageV1.UserFileDeleteRequest) (*cloud_storageV1.UserFileDeleteReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFileDelete(ctx, &model.File{
	//     	Identity: req.Identity,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFileDelete error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFileDeleteReply{
	//     }, nil
}

// UserFileMove 用户-文件移动
func (h *fileHandler) UserFileMove(ctx context.Context, req *cloud_storageV1.UserFileMoveRequest) (*cloud_storageV1.UserFileMoveReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.fileDao.UserFileMove(ctx, &model.File{
	//     	Identity: req.Identity,
	//     	ParentIdentity: req.ParentIdentity,
	//     })
	//	    if err != nil {
	//			logger.Warn("UserFileMove error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.UserFileMoveReply{
	//     }, nil
}
