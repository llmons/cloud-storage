// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"context"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	cloud_storageV1 "cloud-storage/api/cloud_storage/v1"
)

var _ cloud_storageV1.ShareLogicer = (*shareHandler)(nil)

type shareHandler struct {
	// example:
	// 	shareDao dao.ShareDao
}

// NewShareHandler create a handler
func NewShareHandler() cloud_storageV1.ShareLogicer {
	return &shareHandler{
		// example:
		// 	shareDao: dao.NewShareDao(
		// 		database.GetDB(),
		// 		cache.NewShareCache(database.GetCacheType()),
		// 	),
	}
}

// ShareBasicDetail 获取资源详情
func (h *shareHandler) ShareBasicDetail(ctx context.Context, req *cloud_storageV1.ShareBasicDetailRequest) (*cloud_storageV1.ShareBasicDetailReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.shareDao.ShareBasicDetail(ctx, &model.Share{
	//     	Identity: req.Identity,
	//     })
	//	    if err != nil {
	//			logger.Warn("ShareBasicDetail error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.ShareBasicDetailReply{
	//     	RepositoryIdentity: reply.RepositoryIdentity,
	//     	Name: reply.Name,
	//     	Ext: reply.Ext,
	//     	Size: reply.Size,
	//     	Path: reply.Path,
	//     }, nil
}

// ShareBasicCreate 创建分享记录
func (h *shareHandler) ShareBasicCreate(ctx context.Context, req *cloud_storageV1.ShareBasicCreateRequest) (*cloud_storageV1.ShareBasicCreateReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.shareDao.ShareBasicCreate(ctx, &model.Share{
	//     	UserRepositoryIdentity: req.UserRepositoryIdentity,
	//     	ExpiredTime: req.ExpiredTime,
	//     })
	//	    if err != nil {
	//			logger.Warn("ShareBasicCreate error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.ShareBasicCreateReply{
	//     	Identity: reply.Identity,
	//     }, nil
}

// ShareBasicSave 资源保存
func (h *shareHandler) ShareBasicSave(ctx context.Context, req *cloud_storageV1.ShareBasicSaveRequest) (*cloud_storageV1.ShareBasicSaveReply, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	//	    reply, err := h.shareDao.ShareBasicSave(ctx, &model.Share{
	//     	RepositoryIdentity: req.RepositoryIdentity,
	//     	ParentId: req.ParentId,
	//     })
	//	    if err != nil {
	//			logger.Warn("ShareBasicSave error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &cloud_storageV1.ShareBasicSaveReply{
	//     	Identity: reply.Identity,
	//     }, nil
}
