// Code generated by https://github.com/go-dev-frame/sponge

package routers

import (
	"github.com/gin-gonic/gin"

	"github.com/go-dev-frame/sponge/pkg/logger"
	//"github.com/go-dev-frame/sponge/pkg/middleware"

	cloud_storageV1 "cloud-storage/api/cloud_storage/v1"
	"cloud-storage/internal/handler"
)

func init() {
	allMiddlewareFns = append(allMiddlewareFns, func(c *middlewareConfig) {
		fileMiddlewares(c)
	})

	allRouteFns = append(allRouteFns,
		func(r *gin.Engine, groupPathMiddlewares map[string][]gin.HandlerFunc, singlePathMiddlewares map[string][]gin.HandlerFunc) {
			fileRouter(r, groupPathMiddlewares, singlePathMiddlewares, handler.NewFileHandler())
		})
}

func fileRouter(
	r *gin.Engine,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iService cloud_storageV1.FileLogicer) {
	cloud_storageV1.RegisterFileRouter(
		r,
		groupPathMiddlewares,
		singlePathMiddlewares,
		iService,
		cloud_storageV1.WithFileLogger(logger.Get()),
		cloud_storageV1.WithFileHTTPResponse(),
		cloud_storageV1.WithFileErrorToHTTPCode(
		// Set some error codes to standard http return codes,
		// by default there is already ecode.InternalServerError and ecode.ServiceUnavailable
		// example:
		// 	ecode.Forbidden, ecode.LimitExceed,
		),
	)
}

// you can set the middleware of a route group, or set the middleware of a single route,
// or you can mix them, pay attention to the duplication of middleware when mixing them,
// it is recommended to set the middleware of a single route in preference
func fileMiddlewares(c *middlewareConfig) {
	// set up group route middleware, group path is left prefix rules,
	// if the left prefix is hit, the middleware will take effect, e.g. group route is /api/v1, route /api/v1/file/:id  will take effect
	// c.setGroupPath("/api/v1/file", middleware.Auth())

	// set up single route middleware, just uncomment the code and fill in the middlewares, nothing else needs to be changed
	//c.setSinglePath("POST", "/file/upload", middleware.Auth())    // FileUpload 文件上传
	//c.setSinglePath("POST", "/user/repository/save", middleware.Auth())    // UserRepositorySave 用户文件的关联存储
	//c.setSinglePath("POST", "/user/file/list", middleware.Auth())    // UserFileList 用户文件列表
	//c.setSinglePath("POST", "/user/folder/list", middleware.Auth())    // UserFolderList 用户文件夹列表
	//c.setSinglePath("POST", "/user/file/name/update", middleware.Auth())    // UserFileNameUpdate 用户文件名称修改
	//c.setSinglePath("POST", "/user/folder/create", middleware.Auth())    // UserFolderCreate 用户-文件夹创建
	//c.setSinglePath("DELETE", "/user/file/delete", middleware.Auth())    // UserFileDelete 用户-文件删除
	//c.setSinglePath("PUT", "/user/file/move", middleware.Auth())    // UserFileMove 用户-文件移动
}
