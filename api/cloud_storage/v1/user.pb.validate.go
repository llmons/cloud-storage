// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/cloud_storage/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RefreshAuthorizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshAuthorizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshAuthorizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshAuthorizationRequestMultiError, or nil if none found.
func (m *RefreshAuthorizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshAuthorizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefreshAuthorizationRequestMultiError(errors)
	}

	return nil
}

// RefreshAuthorizationRequestMultiError is an error wrapping multiple
// validation errors returned by RefreshAuthorizationRequest.ValidateAll() if
// the designated constraints aren't met.
type RefreshAuthorizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshAuthorizationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshAuthorizationRequestMultiError) AllErrors() []error { return m }

// RefreshAuthorizationRequestValidationError is the validation error returned
// by RefreshAuthorizationRequest.Validate if the designated constraints
// aren't met.
type RefreshAuthorizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshAuthorizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshAuthorizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshAuthorizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshAuthorizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshAuthorizationRequestValidationError) ErrorName() string {
	return "RefreshAuthorizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshAuthorizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshAuthorizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshAuthorizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshAuthorizationRequestValidationError{}

// Validate checks the field values on RefreshAuthorizationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshAuthorizationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshAuthorizationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshAuthorizationReplyMultiError, or nil if none found.
func (m *RefreshAuthorizationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshAuthorizationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshAuthorizationReplyMultiError(errors)
	}

	return nil
}

// RefreshAuthorizationReplyMultiError is an error wrapping multiple validation
// errors returned by RefreshAuthorizationReply.ValidateAll() if the
// designated constraints aren't met.
type RefreshAuthorizationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshAuthorizationReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshAuthorizationReplyMultiError) AllErrors() []error { return m }

// RefreshAuthorizationReplyValidationError is the validation error returned by
// RefreshAuthorizationReply.Validate if the designated constraints aren't met.
type RefreshAuthorizationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshAuthorizationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshAuthorizationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshAuthorizationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshAuthorizationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshAuthorizationReplyValidationError) ErrorName() string {
	return "RefreshAuthorizationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshAuthorizationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshAuthorizationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshAuthorizationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshAuthorizationReplyValidationError{}

// Validate checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterRequestMultiError, or nil if none found.
func (m *UserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Code

	if len(errors) > 0 {
		return UserRegisterRequestMultiError(errors)
	}

	return nil
}

// UserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by UserRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterRequestMultiError) AllErrors() []error { return m }

// UserRegisterRequestValidationError is the validation error returned by
// UserRegisterRequest.Validate if the designated constraints aren't met.
type UserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterRequestValidationError) ErrorName() string {
	return "UserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterRequestValidationError{}

// Validate checks the field values on UserRegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterReplyMultiError, or nil if none found.
func (m *UserRegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserRegisterReplyMultiError(errors)
	}

	return nil
}

// UserRegisterReplyMultiError is an error wrapping multiple validation errors
// returned by UserRegisterReply.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterReplyMultiError) AllErrors() []error { return m }

// UserRegisterReplyValidationError is the validation error returned by
// UserRegisterReply.Validate if the designated constraints aren't met.
type UserRegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterReplyValidationError) ErrorName() string {
	return "UserRegisterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterReplyValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on UserDetailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDetailRequestMultiError, or nil if none found.
func (m *UserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return UserDetailRequestMultiError(errors)
	}

	return nil
}

// UserDetailRequestMultiError is an error wrapping multiple validation errors
// returned by UserDetailRequest.ValidateAll() if the designated constraints
// aren't met.
type UserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailRequestMultiError) AllErrors() []error { return m }

// UserDetailRequestValidationError is the validation error returned by
// UserDetailRequest.Validate if the designated constraints aren't met.
type UserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailRequestValidationError) ErrorName() string {
	return "UserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailRequestValidationError{}

// Validate checks the field values on UserDetailReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDetailReplyMultiError, or nil if none found.
func (m *UserDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return UserDetailReplyMultiError(errors)
	}

	return nil
}

// UserDetailReplyMultiError is an error wrapping multiple validation errors
// returned by UserDetailReply.ValidateAll() if the designated constraints
// aren't met.
type UserDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailReplyMultiError) AllErrors() []error { return m }

// UserDetailReplyValidationError is the validation error returned by
// UserDetailReply.Validate if the designated constraints aren't met.
type UserDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailReplyValidationError) ErrorName() string { return "UserDetailReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailReplyValidationError{}

// Validate checks the field values on MailCodeSendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MailCodeSendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailCodeSendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MailCodeSendRequestMultiError, or nil if none found.
func (m *MailCodeSendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MailCodeSendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return MailCodeSendRequestMultiError(errors)
	}

	return nil
}

// MailCodeSendRequestMultiError is an error wrapping multiple validation
// errors returned by MailCodeSendRequest.ValidateAll() if the designated
// constraints aren't met.
type MailCodeSendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailCodeSendRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailCodeSendRequestMultiError) AllErrors() []error { return m }

// MailCodeSendRequestValidationError is the validation error returned by
// MailCodeSendRequest.Validate if the designated constraints aren't met.
type MailCodeSendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailCodeSendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailCodeSendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailCodeSendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailCodeSendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailCodeSendRequestValidationError) ErrorName() string {
	return "MailCodeSendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MailCodeSendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailCodeSendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailCodeSendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailCodeSendRequestValidationError{}

// Validate checks the field values on MailCodeSendReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MailCodeSendReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailCodeSendReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MailCodeSendReplyMultiError, or nil if none found.
func (m *MailCodeSendReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MailCodeSendReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MailCodeSendReplyMultiError(errors)
	}

	return nil
}

// MailCodeSendReplyMultiError is an error wrapping multiple validation errors
// returned by MailCodeSendReply.ValidateAll() if the designated constraints
// aren't met.
type MailCodeSendReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailCodeSendReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailCodeSendReplyMultiError) AllErrors() []error { return m }

// MailCodeSendReplyValidationError is the validation error returned by
// MailCodeSendReply.Validate if the designated constraints aren't met.
type MailCodeSendReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailCodeSendReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailCodeSendReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailCodeSendReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailCodeSendReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailCodeSendReplyValidationError) ErrorName() string {
	return "MailCodeSendReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MailCodeSendReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailCodeSendReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailCodeSendReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailCodeSendReplyValidationError{}
