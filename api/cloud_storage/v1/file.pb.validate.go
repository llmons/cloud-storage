// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/cloud_storage/v1/file.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserFileMoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFileMoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFileMoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFileMoveRequestMultiError, or nil if none found.
func (m *UserFileMoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFileMoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for ParentIdentity

	if len(errors) > 0 {
		return UserFileMoveRequestMultiError(errors)
	}

	return nil
}

// UserFileMoveRequestMultiError is an error wrapping multiple validation
// errors returned by UserFileMoveRequest.ValidateAll() if the designated
// constraints aren't met.
type UserFileMoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFileMoveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFileMoveRequestMultiError) AllErrors() []error { return m }

// UserFileMoveRequestValidationError is the validation error returned by
// UserFileMoveRequest.Validate if the designated constraints aren't met.
type UserFileMoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFileMoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFileMoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFileMoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFileMoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFileMoveRequestValidationError) ErrorName() string {
	return "UserFileMoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserFileMoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFileMoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFileMoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFileMoveRequestValidationError{}

// Validate checks the field values on UserFileMoveReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserFileMoveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFileMoveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFileMoveReplyMultiError, or nil if none found.
func (m *UserFileMoveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFileMoveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserFileMoveReplyMultiError(errors)
	}

	return nil
}

// UserFileMoveReplyMultiError is an error wrapping multiple validation errors
// returned by UserFileMoveReply.ValidateAll() if the designated constraints
// aren't met.
type UserFileMoveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFileMoveReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFileMoveReplyMultiError) AllErrors() []error { return m }

// UserFileMoveReplyValidationError is the validation error returned by
// UserFileMoveReply.Validate if the designated constraints aren't met.
type UserFileMoveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFileMoveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFileMoveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFileMoveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFileMoveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFileMoveReplyValidationError) ErrorName() string {
	return "UserFileMoveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserFileMoveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFileMoveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFileMoveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFileMoveReplyValidationError{}

// Validate checks the field values on UserFileDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFileDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFileDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFileDeleteRequestMultiError, or nil if none found.
func (m *UserFileDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFileDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return UserFileDeleteRequestMultiError(errors)
	}

	return nil
}

// UserFileDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by UserFileDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type UserFileDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFileDeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFileDeleteRequestMultiError) AllErrors() []error { return m }

// UserFileDeleteRequestValidationError is the validation error returned by
// UserFileDeleteRequest.Validate if the designated constraints aren't met.
type UserFileDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFileDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFileDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFileDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFileDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFileDeleteRequestValidationError) ErrorName() string {
	return "UserFileDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserFileDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFileDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFileDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFileDeleteRequestValidationError{}

// Validate checks the field values on UserFileDeleteReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFileDeleteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFileDeleteReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFileDeleteReplyMultiError, or nil if none found.
func (m *UserFileDeleteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFileDeleteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserFileDeleteReplyMultiError(errors)
	}

	return nil
}

// UserFileDeleteReplyMultiError is an error wrapping multiple validation
// errors returned by UserFileDeleteReply.ValidateAll() if the designated
// constraints aren't met.
type UserFileDeleteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFileDeleteReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFileDeleteReplyMultiError) AllErrors() []error { return m }

// UserFileDeleteReplyValidationError is the validation error returned by
// UserFileDeleteReply.Validate if the designated constraints aren't met.
type UserFileDeleteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFileDeleteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFileDeleteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFileDeleteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFileDeleteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFileDeleteReplyValidationError) ErrorName() string {
	return "UserFileDeleteReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserFileDeleteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFileDeleteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFileDeleteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFileDeleteReplyValidationError{}

// Validate checks the field values on UserFolderCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFolderCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFolderCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFolderCreateRequestMultiError, or nil if none found.
func (m *UserFolderCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFolderCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	// no validation rules for Name

	if len(errors) > 0 {
		return UserFolderCreateRequestMultiError(errors)
	}

	return nil
}

// UserFolderCreateRequestMultiError is an error wrapping multiple validation
// errors returned by UserFolderCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type UserFolderCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFolderCreateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFolderCreateRequestMultiError) AllErrors() []error { return m }

// UserFolderCreateRequestValidationError is the validation error returned by
// UserFolderCreateRequest.Validate if the designated constraints aren't met.
type UserFolderCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFolderCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFolderCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFolderCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFolderCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFolderCreateRequestValidationError) ErrorName() string {
	return "UserFolderCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserFolderCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFolderCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFolderCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFolderCreateRequestValidationError{}

// Validate checks the field values on UserFolderCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFolderCreateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFolderCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFolderCreateReplyMultiError, or nil if none found.
func (m *UserFolderCreateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFolderCreateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return UserFolderCreateReplyMultiError(errors)
	}

	return nil
}

// UserFolderCreateReplyMultiError is an error wrapping multiple validation
// errors returned by UserFolderCreateReply.ValidateAll() if the designated
// constraints aren't met.
type UserFolderCreateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFolderCreateReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFolderCreateReplyMultiError) AllErrors() []error { return m }

// UserFolderCreateReplyValidationError is the validation error returned by
// UserFolderCreateReply.Validate if the designated constraints aren't met.
type UserFolderCreateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFolderCreateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFolderCreateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFolderCreateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFolderCreateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFolderCreateReplyValidationError) ErrorName() string {
	return "UserFolderCreateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserFolderCreateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFolderCreateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFolderCreateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFolderCreateReplyValidationError{}

// Validate checks the field values on UserFileNameUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFileNameUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFileNameUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFileNameUpdateRequestMultiError, or nil if none found.
func (m *UserFileNameUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFileNameUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for Name

	if len(errors) > 0 {
		return UserFileNameUpdateRequestMultiError(errors)
	}

	return nil
}

// UserFileNameUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by UserFileNameUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type UserFileNameUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFileNameUpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFileNameUpdateRequestMultiError) AllErrors() []error { return m }

// UserFileNameUpdateRequestValidationError is the validation error returned by
// UserFileNameUpdateRequest.Validate if the designated constraints aren't met.
type UserFileNameUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFileNameUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFileNameUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFileNameUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFileNameUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFileNameUpdateRequestValidationError) ErrorName() string {
	return "UserFileNameUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserFileNameUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFileNameUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFileNameUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFileNameUpdateRequestValidationError{}

// Validate checks the field values on UserFileNameUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFileNameUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFileNameUpdateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFileNameUpdateReplyMultiError, or nil if none found.
func (m *UserFileNameUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFileNameUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserFileNameUpdateReplyMultiError(errors)
	}

	return nil
}

// UserFileNameUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by UserFileNameUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type UserFileNameUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFileNameUpdateReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFileNameUpdateReplyMultiError) AllErrors() []error { return m }

// UserFileNameUpdateReplyValidationError is the validation error returned by
// UserFileNameUpdateReply.Validate if the designated constraints aren't met.
type UserFileNameUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFileNameUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFileNameUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFileNameUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFileNameUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFileNameUpdateReplyValidationError) ErrorName() string {
	return "UserFileNameUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserFileNameUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFileNameUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFileNameUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFileNameUpdateReplyValidationError{}

// Validate checks the field values on UserFileListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFileListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFileListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFileListRequestMultiError, or nil if none found.
func (m *UserFileListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFileListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for Page

	// no validation rules for Size

	if len(errors) > 0 {
		return UserFileListRequestMultiError(errors)
	}

	return nil
}

// UserFileListRequestMultiError is an error wrapping multiple validation
// errors returned by UserFileListRequest.ValidateAll() if the designated
// constraints aren't met.
type UserFileListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFileListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFileListRequestMultiError) AllErrors() []error { return m }

// UserFileListRequestValidationError is the validation error returned by
// UserFileListRequest.Validate if the designated constraints aren't met.
type UserFileListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFileListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFileListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFileListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFileListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFileListRequestValidationError) ErrorName() string {
	return "UserFileListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserFileListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFileListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFileListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFileListRequestValidationError{}

// Validate checks the field values on UserFileListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserFileListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFileListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFileListReplyMultiError, or nil if none found.
func (m *UserFileListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFileListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserFileListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserFileListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserFileListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return UserFileListReplyMultiError(errors)
	}

	return nil
}

// UserFileListReplyMultiError is an error wrapping multiple validation errors
// returned by UserFileListReply.ValidateAll() if the designated constraints
// aren't met.
type UserFileListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFileListReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFileListReplyMultiError) AllErrors() []error { return m }

// UserFileListReplyValidationError is the validation error returned by
// UserFileListReply.Validate if the designated constraints aren't met.
type UserFileListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFileListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFileListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFileListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFileListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFileListReplyValidationError) ErrorName() string {
	return "UserFileListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserFileListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFileListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFileListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFileListReplyValidationError{}

// Validate checks the field values on UserFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserFileMultiError, or nil
// if none found.
func (m *UserFile) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Identity

	// no validation rules for RepositoryIdentity

	// no validation rules for Name

	// no validation rules for Ext

	// no validation rules for Path

	// no validation rules for Size

	if len(errors) > 0 {
		return UserFileMultiError(errors)
	}

	return nil
}

// UserFileMultiError is an error wrapping multiple validation errors returned
// by UserFile.ValidateAll() if the designated constraints aren't met.
type UserFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFileMultiError) AllErrors() []error { return m }

// UserFileValidationError is the validation error returned by
// UserFile.Validate if the designated constraints aren't met.
type UserFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFileValidationError) ErrorName() string { return "UserFileValidationError" }

// Error satisfies the builtin error interface
func (e UserFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFileValidationError{}

// Validate checks the field values on UserFolderListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFolderListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFolderListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFolderListRequestMultiError, or nil if none found.
func (m *UserFolderListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFolderListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return UserFolderListRequestMultiError(errors)
	}

	return nil
}

// UserFolderListRequestMultiError is an error wrapping multiple validation
// errors returned by UserFolderListRequest.ValidateAll() if the designated
// constraints aren't met.
type UserFolderListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFolderListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFolderListRequestMultiError) AllErrors() []error { return m }

// UserFolderListRequestValidationError is the validation error returned by
// UserFolderListRequest.Validate if the designated constraints aren't met.
type UserFolderListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFolderListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFolderListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFolderListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFolderListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFolderListRequestValidationError) ErrorName() string {
	return "UserFolderListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserFolderListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFolderListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFolderListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFolderListRequestValidationError{}

// Validate checks the field values on UserFolderListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFolderListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFolderListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFolderListReplyMultiError, or nil if none found.
func (m *UserFolderListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFolderListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserFolderListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserFolderListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserFolderListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserFolderListReplyMultiError(errors)
	}

	return nil
}

// UserFolderListReplyMultiError is an error wrapping multiple validation
// errors returned by UserFolderListReply.ValidateAll() if the designated
// constraints aren't met.
type UserFolderListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFolderListReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFolderListReplyMultiError) AllErrors() []error { return m }

// UserFolderListReplyValidationError is the validation error returned by
// UserFolderListReply.Validate if the designated constraints aren't met.
type UserFolderListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFolderListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFolderListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFolderListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFolderListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFolderListReplyValidationError) ErrorName() string {
	return "UserFolderListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserFolderListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFolderListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFolderListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFolderListReplyValidationError{}

// Validate checks the field values on UserFolder with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserFolder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFolder with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserFolderMultiError, or
// nil if none found.
func (m *UserFolder) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFolder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for Name

	if len(errors) > 0 {
		return UserFolderMultiError(errors)
	}

	return nil
}

// UserFolderMultiError is an error wrapping multiple validation errors
// returned by UserFolder.ValidateAll() if the designated constraints aren't met.
type UserFolderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFolderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFolderMultiError) AllErrors() []error { return m }

// UserFolderValidationError is the validation error returned by
// UserFolder.Validate if the designated constraints aren't met.
type UserFolderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFolderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFolderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFolderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFolderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFolderValidationError) ErrorName() string { return "UserFolderValidationError" }

// Error satisfies the builtin error interface
func (e UserFolderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFolder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFolderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFolderValidationError{}

// Validate checks the field values on UserRepositorySaveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRepositorySaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRepositorySaveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRepositorySaveRequestMultiError, or nil if none found.
func (m *UserRepositorySaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRepositorySaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	// no validation rules for RepositoryIdentity

	// no validation rules for Ext

	// no validation rules for Name

	if len(errors) > 0 {
		return UserRepositorySaveRequestMultiError(errors)
	}

	return nil
}

// UserRepositorySaveRequestMultiError is an error wrapping multiple validation
// errors returned by UserRepositorySaveRequest.ValidateAll() if the
// designated constraints aren't met.
type UserRepositorySaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRepositorySaveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRepositorySaveRequestMultiError) AllErrors() []error { return m }

// UserRepositorySaveRequestValidationError is the validation error returned by
// UserRepositorySaveRequest.Validate if the designated constraints aren't met.
type UserRepositorySaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRepositorySaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRepositorySaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRepositorySaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRepositorySaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRepositorySaveRequestValidationError) ErrorName() string {
	return "UserRepositorySaveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRepositorySaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRepositorySaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRepositorySaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRepositorySaveRequestValidationError{}

// Validate checks the field values on UserRepositorySaveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRepositorySaveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRepositorySaveReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRepositorySaveReplyMultiError, or nil if none found.
func (m *UserRepositorySaveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRepositorySaveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserRepositorySaveReplyMultiError(errors)
	}

	return nil
}

// UserRepositorySaveReplyMultiError is an error wrapping multiple validation
// errors returned by UserRepositorySaveReply.ValidateAll() if the designated
// constraints aren't met.
type UserRepositorySaveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRepositorySaveReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRepositorySaveReplyMultiError) AllErrors() []error { return m }

// UserRepositorySaveReplyValidationError is the validation error returned by
// UserRepositorySaveReply.Validate if the designated constraints aren't met.
type UserRepositorySaveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRepositorySaveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRepositorySaveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRepositorySaveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRepositorySaveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRepositorySaveReplyValidationError) ErrorName() string {
	return "UserRepositorySaveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserRepositorySaveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRepositorySaveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRepositorySaveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRepositorySaveReplyValidationError{}

// Validate checks the field values on FileUploadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadRequestMultiError, or nil if none found.
func (m *FileUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	// no validation rules for Name

	// no validation rules for Ext

	// no validation rules for Size

	// no validation rules for Path

	if len(errors) > 0 {
		return FileUploadRequestMultiError(errors)
	}

	return nil
}

// FileUploadRequestMultiError is an error wrapping multiple validation errors
// returned by FileUploadRequest.ValidateAll() if the designated constraints
// aren't met.
type FileUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadRequestMultiError) AllErrors() []error { return m }

// FileUploadRequestValidationError is the validation error returned by
// FileUploadRequest.Validate if the designated constraints aren't met.
type FileUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadRequestValidationError) ErrorName() string {
	return "FileUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadRequestValidationError{}

// Validate checks the field values on FileUploadReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileUploadReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadReplyMultiError, or nil if none found.
func (m *FileUploadReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for Ext

	// no validation rules for Name

	if len(errors) > 0 {
		return FileUploadReplyMultiError(errors)
	}

	return nil
}

// FileUploadReplyMultiError is an error wrapping multiple validation errors
// returned by FileUploadReply.ValidateAll() if the designated constraints
// aren't met.
type FileUploadReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadReplyMultiError) AllErrors() []error { return m }

// FileUploadReplyValidationError is the validation error returned by
// FileUploadReply.Validate if the designated constraints aren't met.
type FileUploadReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadReplyValidationError) ErrorName() string { return "FileUploadReplyValidationError" }

// Error satisfies the builtin error interface
func (e FileUploadReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadReplyValidationError{}
