// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: api/cloud_storage/v1/chunk.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileUploadChunkCompleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Md5           string                 `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Ext           string                 `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext"`
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key"`
	UploadId      string                 `protobuf:"bytes,6,opt,name=upload_id,json=uploadId,proto3" json:"upload_id"`
	CosObjects    []*CosObject           `protobuf:"bytes,7,rep,name=cos_objects,json=cosObjects,proto3" json:"cos_objects"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUploadChunkCompleteRequest) Reset() {
	*x = FileUploadChunkCompleteRequest{}
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadChunkCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadChunkCompleteRequest) ProtoMessage() {}

func (x *FileUploadChunkCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadChunkCompleteRequest.ProtoReflect.Descriptor instead.
func (*FileUploadChunkCompleteRequest) Descriptor() ([]byte, []int) {
	return file_api_cloud_storage_v1_chunk_proto_rawDescGZIP(), []int{0}
}

func (x *FileUploadChunkCompleteRequest) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *FileUploadChunkCompleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileUploadChunkCompleteRequest) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *FileUploadChunkCompleteRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileUploadChunkCompleteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FileUploadChunkCompleteRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *FileUploadChunkCompleteRequest) GetCosObjects() []*CosObject {
	if x != nil {
		return x.CosObjects
	}
	return nil
}

type CosObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartNumber    int32                  `protobuf:"varint,1,opt,name=part_number,json=partNumber,proto3" json:"part_number"`
	Etag          string                 `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CosObject) Reset() {
	*x = CosObject{}
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CosObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosObject) ProtoMessage() {}

func (x *CosObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosObject.ProtoReflect.Descriptor instead.
func (*CosObject) Descriptor() ([]byte, []int) {
	return file_api_cloud_storage_v1_chunk_proto_rawDescGZIP(), []int{1}
}

func (x *CosObject) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

func (x *CosObject) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

type FileUploadChunkCompleteReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identity      string                 `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUploadChunkCompleteReply) Reset() {
	*x = FileUploadChunkCompleteReply{}
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadChunkCompleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadChunkCompleteReply) ProtoMessage() {}

func (x *FileUploadChunkCompleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadChunkCompleteReply.ProtoReflect.Descriptor instead.
func (*FileUploadChunkCompleteReply) Descriptor() ([]byte, []int) {
	return file_api_cloud_storage_v1_chunk_proto_rawDescGZIP(), []int{2}
}

func (x *FileUploadChunkCompleteReply) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type FileUploadChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	UploadId      string                 `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id"`
	PartNumber    int32                  `protobuf:"varint,3,opt,name=part_number,json=partNumber,proto3" json:"part_number"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUploadChunkRequest) Reset() {
	*x = FileUploadChunkRequest{}
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadChunkRequest) ProtoMessage() {}

func (x *FileUploadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadChunkRequest.ProtoReflect.Descriptor instead.
func (*FileUploadChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_cloud_storage_v1_chunk_proto_rawDescGZIP(), []int{3}
}

func (x *FileUploadChunkRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FileUploadChunkRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *FileUploadChunkRequest) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

type FileUploadChunkReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Etag          string                 `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUploadChunkReply) Reset() {
	*x = FileUploadChunkReply{}
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadChunkReply) ProtoMessage() {}

func (x *FileUploadChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadChunkReply.ProtoReflect.Descriptor instead.
func (*FileUploadChunkReply) Descriptor() ([]byte, []int) {
	return file_api_cloud_storage_v1_chunk_proto_rawDescGZIP(), []int{4}
}

func (x *FileUploadChunkReply) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

type FileUploadPrepareRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Md5           string                 `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Ext           string                 `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUploadPrepareRequest) Reset() {
	*x = FileUploadPrepareRequest{}
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadPrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadPrepareRequest) ProtoMessage() {}

func (x *FileUploadPrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadPrepareRequest.ProtoReflect.Descriptor instead.
func (*FileUploadPrepareRequest) Descriptor() ([]byte, []int) {
	return file_api_cloud_storage_v1_chunk_proto_rawDescGZIP(), []int{5}
}

func (x *FileUploadPrepareRequest) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *FileUploadPrepareRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileUploadPrepareRequest) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

type FileUploadPrepareReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identity      string                 `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity"`
	UploadId      string                 `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id"`
	Key           string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUploadPrepareReply) Reset() {
	*x = FileUploadPrepareReply{}
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadPrepareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadPrepareReply) ProtoMessage() {}

func (x *FileUploadPrepareReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_cloud_storage_v1_chunk_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadPrepareReply.ProtoReflect.Descriptor instead.
func (*FileUploadPrepareReply) Descriptor() ([]byte, []int) {
	return file_api_cloud_storage_v1_chunk_proto_rawDescGZIP(), []int{6}
}

func (x *FileUploadPrepareReply) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *FileUploadPrepareReply) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *FileUploadPrepareReply) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_api_cloud_storage_v1_chunk_proto protoreflect.FileDescriptor

const file_api_cloud_storage_v1_chunk_proto_rawDesc = "" +
	"\n" +
	" api/cloud_storage/v1/chunk.proto\x1a\x1cgoogle/api/annotations.proto\"\xc8\x01\n" +
	"\x1eFileUploadChunkCompleteRequest\x12\x10\n" +
	"\x03md5\x18\x01 \x01(\tR\x03md5\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03ext\x18\x03 \x01(\tR\x03ext\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\x12\x10\n" +
	"\x03key\x18\x05 \x01(\tR\x03key\x12\x1b\n" +
	"\tupload_id\x18\x06 \x01(\tR\buploadId\x12+\n" +
	"\vcos_objects\x18\a \x03(\v2\n" +
	".CosObjectR\n" +
	"cosObjects\"@\n" +
	"\tCosObject\x12\x1f\n" +
	"\vpart_number\x18\x01 \x01(\x05R\n" +
	"partNumber\x12\x12\n" +
	"\x04etag\x18\x02 \x01(\tR\x04etag\":\n" +
	"\x1cFileUploadChunkCompleteReply\x12\x1a\n" +
	"\bidentity\x18\x01 \x01(\tR\bidentity\"h\n" +
	"\x16FileUploadChunkRequest\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x1b\n" +
	"\tupload_id\x18\x02 \x01(\tR\buploadId\x12\x1f\n" +
	"\vpart_number\x18\x03 \x01(\x05R\n" +
	"partNumber\"*\n" +
	"\x14FileUploadChunkReply\x12\x12\n" +
	"\x04etag\x18\x01 \x01(\tR\x04etag\"R\n" +
	"\x18FileUploadPrepareRequest\x12\x10\n" +
	"\x03md5\x18\x01 \x01(\tR\x03md5\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03ext\x18\x03 \x01(\tR\x03ext\"c\n" +
	"\x16FileUploadPrepareReply\x12\x1a\n" +
	"\bidentity\x18\x01 \x01(\tR\bidentity\x12\x1b\n" +
	"\tupload_id\x18\x02 \x01(\tR\buploadId\x12\x10\n" +
	"\x03key\x18\x03 \x01(\tR\x03key2\xd7\x02\n" +
	"\x05chunk\x12h\n" +
	"\x11FileUploadPrepare\x12\x19.FileUploadPrepareRequest\x1a\x17.FileUploadPrepareReply\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/file/upload/prepare\x12`\n" +
	"\x0fFileUploadChunk\x12\x17.FileUploadChunkRequest\x1a\x15.FileUploadChunkReply\"\x1d\x82\xd3\xe4\x93\x02\x17:\x01*\"\x12/file/upload/chunk\x12\x81\x01\n" +
	"\x17FileUploadChunkComplete\x12\x1f.FileUploadChunkCompleteRequest\x1a\x1d.FileUploadChunkCompleteReply\"&\x82\xd3\xe4\x93\x02 :\x01*\"\x1b/file/upload/chunk/completeB'Z%cloud-storage/api/cloud_storage/v1;v1b\x06proto3"

var (
	file_api_cloud_storage_v1_chunk_proto_rawDescOnce sync.Once
	file_api_cloud_storage_v1_chunk_proto_rawDescData []byte
)

func file_api_cloud_storage_v1_chunk_proto_rawDescGZIP() []byte {
	file_api_cloud_storage_v1_chunk_proto_rawDescOnce.Do(func() {
		file_api_cloud_storage_v1_chunk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_cloud_storage_v1_chunk_proto_rawDesc), len(file_api_cloud_storage_v1_chunk_proto_rawDesc)))
	})
	return file_api_cloud_storage_v1_chunk_proto_rawDescData
}

var file_api_cloud_storage_v1_chunk_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_cloud_storage_v1_chunk_proto_goTypes = []any{
	(*FileUploadChunkCompleteRequest)(nil), // 0: FileUploadChunkCompleteRequest
	(*CosObject)(nil),                      // 1: CosObject
	(*FileUploadChunkCompleteReply)(nil),   // 2: FileUploadChunkCompleteReply
	(*FileUploadChunkRequest)(nil),         // 3: FileUploadChunkRequest
	(*FileUploadChunkReply)(nil),           // 4: FileUploadChunkReply
	(*FileUploadPrepareRequest)(nil),       // 5: FileUploadPrepareRequest
	(*FileUploadPrepareReply)(nil),         // 6: FileUploadPrepareReply
}
var file_api_cloud_storage_v1_chunk_proto_depIdxs = []int32{
	1, // 0: FileUploadChunkCompleteRequest.cos_objects:type_name -> CosObject
	5, // 1: chunk.FileUploadPrepare:input_type -> FileUploadPrepareRequest
	3, // 2: chunk.FileUploadChunk:input_type -> FileUploadChunkRequest
	0, // 3: chunk.FileUploadChunkComplete:input_type -> FileUploadChunkCompleteRequest
	6, // 4: chunk.FileUploadPrepare:output_type -> FileUploadPrepareReply
	4, // 5: chunk.FileUploadChunk:output_type -> FileUploadChunkReply
	2, // 6: chunk.FileUploadChunkComplete:output_type -> FileUploadChunkCompleteReply
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_cloud_storage_v1_chunk_proto_init() }
func file_api_cloud_storage_v1_chunk_proto_init() {
	if File_api_cloud_storage_v1_chunk_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_cloud_storage_v1_chunk_proto_rawDesc), len(file_api_cloud_storage_v1_chunk_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_cloud_storage_v1_chunk_proto_goTypes,
		DependencyIndexes: file_api_cloud_storage_v1_chunk_proto_depIdxs,
		MessageInfos:      file_api_cloud_storage_v1_chunk_proto_msgTypes,
	}.Build()
	File_api_cloud_storage_v1_chunk_proto = out.File
	file_api_cloud_storage_v1_chunk_proto_goTypes = nil
	file_api_cloud_storage_v1_chunk_proto_depIdxs = nil
}
