// Code generated by https://github.com/go-dev-frame/sponge, DO NOT EDIT.

package v1

import (
	"context"
	"errors"
	"strings"

	"github.com/gin-gonic/gin"
	"go.uber.org/zap"

	"github.com/go-dev-frame/sponge/pkg/errcode"
	"github.com/go-dev-frame/sponge/pkg/gin/middleware"
)

type ShareLogicer interface {
	ShareBasicDetail(ctx context.Context, req *ShareBasicDetailRequest) (*ShareBasicDetailReply, error)
	ShareBasicCreate(ctx context.Context, req *ShareBasicCreateRequest) (*ShareBasicCreateReply, error)
	ShareBasicSave(ctx context.Context, req *ShareBasicSaveRequest) (*ShareBasicSaveReply, error)
}

type ShareOption func(*shareOptions)

type shareOptions struct {
	isFromRPC  bool
	responser  errcode.Responser
	zapLog     *zap.Logger
	httpErrors []*errcode.Error
	rpcStatus  []*errcode.RPCStatus
	wrapCtxFn  func(c *gin.Context) context.Context
}

func (o *shareOptions) apply(opts ...ShareOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func WithShareHTTPResponse() ShareOption {
	return func(o *shareOptions) {
		o.isFromRPC = false
	}
}

func WithShareRPCResponse() ShareOption {
	return func(o *shareOptions) {
		o.isFromRPC = true
	}
}

func WithShareResponser(responser errcode.Responser) ShareOption {
	return func(o *shareOptions) {
		o.responser = responser
	}
}

func WithShareLogger(zapLog *zap.Logger) ShareOption {
	return func(o *shareOptions) {
		o.zapLog = zapLog
	}
}

func WithShareErrorToHTTPCode(e ...*errcode.Error) ShareOption {
	return func(o *shareOptions) {
		o.httpErrors = e
	}
}

func WithShareRPCStatusToHTTPCode(s ...*errcode.RPCStatus) ShareOption {
	return func(o *shareOptions) {
		o.rpcStatus = s
	}
}

func WithShareWrapCtx(wrapCtxFn func(c *gin.Context) context.Context) ShareOption {
	return func(o *shareOptions) {
		o.wrapCtxFn = wrapCtxFn
	}
}

func RegisterShareRouter(
	iRouter gin.IRouter,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iLogic ShareLogicer,
	opts ...ShareOption) {

	o := &shareOptions{}
	o.apply(opts...)

	if o.responser == nil {
		o.responser = errcode.NewResponser(o.isFromRPC, o.httpErrors, o.rpcStatus)
	}
	if o.zapLog == nil {
		o.zapLog, _ = zap.NewProduction()
	}

	r := &shareRouter{
		iRouter:               iRouter,
		groupPathMiddlewares:  groupPathMiddlewares,
		singlePathMiddlewares: singlePathMiddlewares,
		iLogic:                iLogic,
		iResponse:             o.responser,
		zapLog:                o.zapLog,
		wrapCtxFn:             o.wrapCtxFn,
	}
	r.register()
}

type shareRouter struct {
	iRouter               gin.IRouter
	groupPathMiddlewares  map[string][]gin.HandlerFunc
	singlePathMiddlewares map[string][]gin.HandlerFunc
	iLogic                ShareLogicer
	iResponse             errcode.Responser
	zapLog                *zap.Logger
	wrapCtxFn             func(c *gin.Context) context.Context
}

func (r *shareRouter) register() {
	r.iRouter.Handle("GET", "/share/basic/detail", r.withMiddleware("GET", "/share/basic/detail", r.ShareBasicDetail_0)...)
	r.iRouter.Handle("POST", "/share/basic/create", r.withMiddleware("POST", "/share/basic/create", r.ShareBasicCreate_0)...)
	r.iRouter.Handle("POST", "/share/basic/save", r.withMiddleware("POST", "/share/basic/save", r.ShareBasicSave_0)...)

}

func (r *shareRouter) withMiddleware(method string, path string, fn gin.HandlerFunc) []gin.HandlerFunc {
	handlerFns := []gin.HandlerFunc{}

	// determine if a route group is hit or miss, left prefix rule
	for groupPath, fns := range r.groupPathMiddlewares {
		if groupPath == "" || groupPath == "/" {
			handlerFns = append(handlerFns, fns...)
			continue
		}
		size := len(groupPath)
		if len(path) < size {
			continue
		}
		if groupPath == path[:size] {
			handlerFns = append(handlerFns, fns...)
		}
	}

	// determine if a single route has been hit
	key := strings.ToUpper(method) + "->" + path
	if fns, ok := r.singlePathMiddlewares[key]; ok {
		handlerFns = append(handlerFns, fns...)
	}

	return append(handlerFns, fn)
}

func (r *shareRouter) ShareBasicDetail_0(c *gin.Context) {
	req := &ShareBasicDetailRequest{}
	var err error

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ShareBasicDetail(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *shareRouter) ShareBasicCreate_0(c *gin.Context) {
	req := &ShareBasicCreateRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ShareBasicCreate(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *shareRouter) ShareBasicSave_0(c *gin.Context) {
	req := &ShareBasicSaveRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ShareBasicSave(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}
