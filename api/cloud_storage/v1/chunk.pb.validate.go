// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/cloud_storage/v1/chunk.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileUploadChunkCompleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileUploadChunkCompleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadChunkCompleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FileUploadChunkCompleteRequestMultiError, or nil if none found.
func (m *FileUploadChunkCompleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadChunkCompleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Md5

	// no validation rules for Name

	// no validation rules for Ext

	// no validation rules for Size

	// no validation rules for Key

	// no validation rules for UploadId

	for idx, item := range m.GetCosObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileUploadChunkCompleteRequestValidationError{
						field:  fmt.Sprintf("CosObjects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileUploadChunkCompleteRequestValidationError{
						field:  fmt.Sprintf("CosObjects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileUploadChunkCompleteRequestValidationError{
					field:  fmt.Sprintf("CosObjects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FileUploadChunkCompleteRequestMultiError(errors)
	}

	return nil
}

// FileUploadChunkCompleteRequestMultiError is an error wrapping multiple
// validation errors returned by FileUploadChunkCompleteRequest.ValidateAll()
// if the designated constraints aren't met.
type FileUploadChunkCompleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadChunkCompleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadChunkCompleteRequestMultiError) AllErrors() []error { return m }

// FileUploadChunkCompleteRequestValidationError is the validation error
// returned by FileUploadChunkCompleteRequest.Validate if the designated
// constraints aren't met.
type FileUploadChunkCompleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadChunkCompleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadChunkCompleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadChunkCompleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadChunkCompleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadChunkCompleteRequestValidationError) ErrorName() string {
	return "FileUploadChunkCompleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadChunkCompleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadChunkCompleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadChunkCompleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadChunkCompleteRequestValidationError{}

// Validate checks the field values on CosObject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CosObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CosObject with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CosObjectMultiError, or nil
// if none found.
func (m *CosObject) ValidateAll() error {
	return m.validate(true)
}

func (m *CosObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartNumber

	// no validation rules for Etag

	if len(errors) > 0 {
		return CosObjectMultiError(errors)
	}

	return nil
}

// CosObjectMultiError is an error wrapping multiple validation errors returned
// by CosObject.ValidateAll() if the designated constraints aren't met.
type CosObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CosObjectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CosObjectMultiError) AllErrors() []error { return m }

// CosObjectValidationError is the validation error returned by
// CosObject.Validate if the designated constraints aren't met.
type CosObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CosObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CosObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CosObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CosObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CosObjectValidationError) ErrorName() string { return "CosObjectValidationError" }

// Error satisfies the builtin error interface
func (e CosObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCosObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CosObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CosObjectValidationError{}

// Validate checks the field values on FileUploadChunkCompleteReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileUploadChunkCompleteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadChunkCompleteReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadChunkCompleteReplyMultiError, or nil if none found.
func (m *FileUploadChunkCompleteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadChunkCompleteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return FileUploadChunkCompleteReplyMultiError(errors)
	}

	return nil
}

// FileUploadChunkCompleteReplyMultiError is an error wrapping multiple
// validation errors returned by FileUploadChunkCompleteReply.ValidateAll() if
// the designated constraints aren't met.
type FileUploadChunkCompleteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadChunkCompleteReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadChunkCompleteReplyMultiError) AllErrors() []error { return m }

// FileUploadChunkCompleteReplyValidationError is the validation error returned
// by FileUploadChunkCompleteReply.Validate if the designated constraints
// aren't met.
type FileUploadChunkCompleteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadChunkCompleteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadChunkCompleteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadChunkCompleteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadChunkCompleteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadChunkCompleteReplyValidationError) ErrorName() string {
	return "FileUploadChunkCompleteReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadChunkCompleteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadChunkCompleteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadChunkCompleteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadChunkCompleteReplyValidationError{}

// Validate checks the field values on FileUploadChunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileUploadChunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadChunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadChunkRequestMultiError, or nil if none found.
func (m *FileUploadChunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadChunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for UploadId

	// no validation rules for PartNumber

	if len(errors) > 0 {
		return FileUploadChunkRequestMultiError(errors)
	}

	return nil
}

// FileUploadChunkRequestMultiError is an error wrapping multiple validation
// errors returned by FileUploadChunkRequest.ValidateAll() if the designated
// constraints aren't met.
type FileUploadChunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadChunkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadChunkRequestMultiError) AllErrors() []error { return m }

// FileUploadChunkRequestValidationError is the validation error returned by
// FileUploadChunkRequest.Validate if the designated constraints aren't met.
type FileUploadChunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadChunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadChunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadChunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadChunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadChunkRequestValidationError) ErrorName() string {
	return "FileUploadChunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadChunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadChunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadChunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadChunkRequestValidationError{}

// Validate checks the field values on FileUploadChunkReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileUploadChunkReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadChunkReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadChunkReplyMultiError, or nil if none found.
func (m *FileUploadChunkReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadChunkReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Etag

	if len(errors) > 0 {
		return FileUploadChunkReplyMultiError(errors)
	}

	return nil
}

// FileUploadChunkReplyMultiError is an error wrapping multiple validation
// errors returned by FileUploadChunkReply.ValidateAll() if the designated
// constraints aren't met.
type FileUploadChunkReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadChunkReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadChunkReplyMultiError) AllErrors() []error { return m }

// FileUploadChunkReplyValidationError is the validation error returned by
// FileUploadChunkReply.Validate if the designated constraints aren't met.
type FileUploadChunkReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadChunkReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadChunkReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadChunkReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadChunkReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadChunkReplyValidationError) ErrorName() string {
	return "FileUploadChunkReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadChunkReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadChunkReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadChunkReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadChunkReplyValidationError{}

// Validate checks the field values on FileUploadPrepareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileUploadPrepareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadPrepareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadPrepareRequestMultiError, or nil if none found.
func (m *FileUploadPrepareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadPrepareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Md5

	// no validation rules for Name

	// no validation rules for Ext

	if len(errors) > 0 {
		return FileUploadPrepareRequestMultiError(errors)
	}

	return nil
}

// FileUploadPrepareRequestMultiError is an error wrapping multiple validation
// errors returned by FileUploadPrepareRequest.ValidateAll() if the designated
// constraints aren't met.
type FileUploadPrepareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadPrepareRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadPrepareRequestMultiError) AllErrors() []error { return m }

// FileUploadPrepareRequestValidationError is the validation error returned by
// FileUploadPrepareRequest.Validate if the designated constraints aren't met.
type FileUploadPrepareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadPrepareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadPrepareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadPrepareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadPrepareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadPrepareRequestValidationError) ErrorName() string {
	return "FileUploadPrepareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadPrepareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadPrepareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadPrepareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadPrepareRequestValidationError{}

// Validate checks the field values on FileUploadPrepareReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileUploadPrepareReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadPrepareReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadPrepareReplyMultiError, or nil if none found.
func (m *FileUploadPrepareReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadPrepareReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for UploadId

	// no validation rules for Key

	if len(errors) > 0 {
		return FileUploadPrepareReplyMultiError(errors)
	}

	return nil
}

// FileUploadPrepareReplyMultiError is an error wrapping multiple validation
// errors returned by FileUploadPrepareReply.ValidateAll() if the designated
// constraints aren't met.
type FileUploadPrepareReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadPrepareReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadPrepareReplyMultiError) AllErrors() []error { return m }

// FileUploadPrepareReplyValidationError is the validation error returned by
// FileUploadPrepareReply.Validate if the designated constraints aren't met.
type FileUploadPrepareReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadPrepareReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadPrepareReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadPrepareReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadPrepareReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadPrepareReplyValidationError) ErrorName() string {
	return "FileUploadPrepareReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadPrepareReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadPrepareReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadPrepareReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadPrepareReplyValidationError{}
