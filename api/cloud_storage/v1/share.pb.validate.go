// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/cloud_storage/v1/share.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShareBasicSaveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareBasicSaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareBasicSaveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareBasicSaveRequestMultiError, or nil if none found.
func (m *ShareBasicSaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareBasicSaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepositoryIdentity

	// no validation rules for ParentId

	if len(errors) > 0 {
		return ShareBasicSaveRequestMultiError(errors)
	}

	return nil
}

// ShareBasicSaveRequestMultiError is an error wrapping multiple validation
// errors returned by ShareBasicSaveRequest.ValidateAll() if the designated
// constraints aren't met.
type ShareBasicSaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareBasicSaveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareBasicSaveRequestMultiError) AllErrors() []error { return m }

// ShareBasicSaveRequestValidationError is the validation error returned by
// ShareBasicSaveRequest.Validate if the designated constraints aren't met.
type ShareBasicSaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareBasicSaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareBasicSaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareBasicSaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareBasicSaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareBasicSaveRequestValidationError) ErrorName() string {
	return "ShareBasicSaveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareBasicSaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareBasicSaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareBasicSaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareBasicSaveRequestValidationError{}

// Validate checks the field values on ShareBasicSaveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareBasicSaveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareBasicSaveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareBasicSaveReplyMultiError, or nil if none found.
func (m *ShareBasicSaveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareBasicSaveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return ShareBasicSaveReplyMultiError(errors)
	}

	return nil
}

// ShareBasicSaveReplyMultiError is an error wrapping multiple validation
// errors returned by ShareBasicSaveReply.ValidateAll() if the designated
// constraints aren't met.
type ShareBasicSaveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareBasicSaveReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareBasicSaveReplyMultiError) AllErrors() []error { return m }

// ShareBasicSaveReplyValidationError is the validation error returned by
// ShareBasicSaveReply.Validate if the designated constraints aren't met.
type ShareBasicSaveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareBasicSaveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareBasicSaveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareBasicSaveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareBasicSaveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareBasicSaveReplyValidationError) ErrorName() string {
	return "ShareBasicSaveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ShareBasicSaveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareBasicSaveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareBasicSaveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareBasicSaveReplyValidationError{}

// Validate checks the field values on ShareBasicDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareBasicDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareBasicDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareBasicDetailRequestMultiError, or nil if none found.
func (m *ShareBasicDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareBasicDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return ShareBasicDetailRequestMultiError(errors)
	}

	return nil
}

// ShareBasicDetailRequestMultiError is an error wrapping multiple validation
// errors returned by ShareBasicDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type ShareBasicDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareBasicDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareBasicDetailRequestMultiError) AllErrors() []error { return m }

// ShareBasicDetailRequestValidationError is the validation error returned by
// ShareBasicDetailRequest.Validate if the designated constraints aren't met.
type ShareBasicDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareBasicDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareBasicDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareBasicDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareBasicDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareBasicDetailRequestValidationError) ErrorName() string {
	return "ShareBasicDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareBasicDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareBasicDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareBasicDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareBasicDetailRequestValidationError{}

// Validate checks the field values on ShareBasicDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareBasicDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareBasicDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareBasicDetailReplyMultiError, or nil if none found.
func (m *ShareBasicDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareBasicDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepositoryIdentity

	// no validation rules for Name

	// no validation rules for Ext

	// no validation rules for Size

	// no validation rules for Path

	if len(errors) > 0 {
		return ShareBasicDetailReplyMultiError(errors)
	}

	return nil
}

// ShareBasicDetailReplyMultiError is an error wrapping multiple validation
// errors returned by ShareBasicDetailReply.ValidateAll() if the designated
// constraints aren't met.
type ShareBasicDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareBasicDetailReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareBasicDetailReplyMultiError) AllErrors() []error { return m }

// ShareBasicDetailReplyValidationError is the validation error returned by
// ShareBasicDetailReply.Validate if the designated constraints aren't met.
type ShareBasicDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareBasicDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareBasicDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareBasicDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareBasicDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareBasicDetailReplyValidationError) ErrorName() string {
	return "ShareBasicDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ShareBasicDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareBasicDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareBasicDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareBasicDetailReplyValidationError{}

// Validate checks the field values on ShareBasicCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareBasicCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareBasicCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareBasicCreateRequestMultiError, or nil if none found.
func (m *ShareBasicCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareBasicCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserRepositoryIdentity

	// no validation rules for ExpiredTime

	if len(errors) > 0 {
		return ShareBasicCreateRequestMultiError(errors)
	}

	return nil
}

// ShareBasicCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ShareBasicCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ShareBasicCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareBasicCreateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareBasicCreateRequestMultiError) AllErrors() []error { return m }

// ShareBasicCreateRequestValidationError is the validation error returned by
// ShareBasicCreateRequest.Validate if the designated constraints aren't met.
type ShareBasicCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareBasicCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareBasicCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareBasicCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareBasicCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareBasicCreateRequestValidationError) ErrorName() string {
	return "ShareBasicCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareBasicCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareBasicCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareBasicCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareBasicCreateRequestValidationError{}

// Validate checks the field values on ShareBasicCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareBasicCreateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareBasicCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareBasicCreateReplyMultiError, or nil if none found.
func (m *ShareBasicCreateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareBasicCreateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return ShareBasicCreateReplyMultiError(errors)
	}

	return nil
}

// ShareBasicCreateReplyMultiError is an error wrapping multiple validation
// errors returned by ShareBasicCreateReply.ValidateAll() if the designated
// constraints aren't met.
type ShareBasicCreateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareBasicCreateReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareBasicCreateReplyMultiError) AllErrors() []error { return m }

// ShareBasicCreateReplyValidationError is the validation error returned by
// ShareBasicCreateReply.Validate if the designated constraints aren't met.
type ShareBasicCreateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareBasicCreateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareBasicCreateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareBasicCreateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareBasicCreateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareBasicCreateReplyValidationError) ErrorName() string {
	return "ShareBasicCreateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ShareBasicCreateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareBasicCreateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareBasicCreateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareBasicCreateReplyValidationError{}
